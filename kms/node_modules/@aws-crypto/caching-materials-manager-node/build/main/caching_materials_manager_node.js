"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const cache_material_1 = require("@aws-crypto/cache-material");
const material_management_node_1 = require("@aws-crypto/material-management-node");
const sha512_1 = require("./sha512");
const crypto_1 = require("crypto");
const fromUtf8 = (input) => Buffer.from(input, 'utf8');
const toUtf8 = (input) => Buffer.from(input).toString('utf8');
const cacheKeyHelpers = cache_material_1.buildCryptographicMaterialsCacheKeyHelpers(fromUtf8, toUtf8, sha512_1.sha512);
class NodeCachingMaterialsManager {
    constructor(input) {
        this.getEncryptionMaterials = cache_material_1.getEncryptionMaterials(cacheKeyHelpers);
        this.decryptMaterials = cache_material_1.decryptMaterials(cacheKeyHelpers);
        this._cacheEntryHasExceededLimits = cache_material_1.cacheEntryHasExceededLimits();
        const backingMaterialsManager = input.backingMaterials instanceof material_management_node_1.KeyringNode
            ? new material_management_node_1.NodeDefaultCryptographicMaterialsManager(input.backingMaterials)
            : input.backingMaterials;
        /* Precondition: A partition value must exist for NodeCachingMaterialsManager.
         * The maximum hash function at this time is 512.
         * So I create 64 bytes of random data.
         */
        const { partition = crypto_1.randomBytes(64).toString('base64') } = input;
        cache_material_1.decorateProperties(this, {
            ...input,
            backingMaterialsManager,
            partition,
        });
    }
}
exports.NodeCachingMaterialsManager = NodeCachingMaterialsManager;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZ19tYXRlcmlhbHNfbWFuYWdlcl9ub2RlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NhY2hpbmdfbWF0ZXJpYWxzX21hbmFnZXJfbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7QUFFdEMsK0RBU21DO0FBQ25DLG1GQU82QztBQUM3QyxxQ0FBaUM7QUFDakMsbUNBQW9DO0FBRXBDLE1BQU0sUUFBUSxHQUFHLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQTtBQUM5RCxNQUFNLE1BQU0sR0FBRyxDQUFDLEtBQWlCLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0FBRXpFLE1BQU0sZUFBZSxHQUFHLDJEQUEwQyxDQUNoRSxRQUFRLEVBQ1IsTUFBTSxFQUNOLGVBQU0sQ0FDUCxDQUFBO0FBRUQsTUFBYSwyQkFBMkI7SUFTdEMsWUFBWSxLQUF1RDtRQW1CbkUsMkJBQXNCLEdBQStCLHVDQUFzQixDQUV6RSxlQUFlLENBQUMsQ0FBQTtRQUNsQixxQkFBZ0IsR0FBNEIsaUNBQWdCLENBRTFELGVBQWUsQ0FBQyxDQUFBO1FBQ2xCLGlDQUE0QixHQUFHLDRDQUEyQixFQUV2RCxDQUFBO1FBMUJELE1BQU0sdUJBQXVCLEdBQzNCLEtBQUssQ0FBQyxnQkFBZ0IsWUFBWSxzQ0FBVztZQUMzQyxDQUFDLENBQUMsSUFBSSxtRUFBd0MsQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUM7WUFDdEUsQ0FBQyxDQUFFLEtBQUssQ0FBQyxnQkFBNkQsQ0FBQTtRQUUxRTs7O1dBR0c7UUFDSCxNQUFNLEVBQUUsU0FBUyxHQUFHLG9CQUFXLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBRWhFLG1DQUFrQixDQUFDLElBQUksRUFBRTtZQUN2QixHQUFHLEtBQUs7WUFDUix1QkFBdUI7WUFDdkIsU0FBUztTQUNWLENBQUMsQ0FBQTtJQUNKLENBQUM7Q0FXRjtBQXJDRCxrRUFxQ0MifQ==