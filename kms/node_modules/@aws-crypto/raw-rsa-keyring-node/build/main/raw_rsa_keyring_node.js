"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_node_1 = require("@aws-crypto/material-management-node");
const crypto_1 = require("crypto");
const raw_keyring_1 = require("@aws-crypto/raw-keyring");
const oaep_hash_supported_1 = require("./oaep_hash_supported");
const supportedOaepHash = [
    'sha1',
    'sha256',
    'sha384',
    'sha512',
    undefined,
];
class RawRsaKeyringNode extends material_management_node_1.KeyringNode {
    constructor(input) {
        super();
        this._onEncrypt = raw_keyring_1._onEncrypt(randomBytesAsync);
        this._onDecrypt = raw_keyring_1._onDecrypt();
        const { rsaKey, keyName, keyNamespace, padding = crypto_1.constants.RSA_PKCS1_OAEP_PADDING, oaepHash, } = input;
        const { publicKey, privateKey } = rsaKey;
        /* Precondition: RsaKeyringNode needs either a public or a private key to operate. */
        material_management_node_1.needs(publicKey || privateKey, 'No Key provided.');
        /* Precondition: RsaKeyringNode needs identifying information for encrypt and decrypt. */
        material_management_node_1.needs(keyName && keyNamespace, 'Identifying information must be defined.');
        /* Precondition: The AWS ESDK only supports specific hash values for OAEP padding. */
        material_management_node_1.needs(padding === crypto_1.constants.RSA_PKCS1_OAEP_PADDING
            ? oaep_hash_supported_1.oaepHashSupported
                ? supportedOaepHash.includes(oaepHash)
                : !oaepHash || oaepHash === 'sha1'
            : !oaepHash, 'Unsupported oaepHash');
        const _wrapKey = async (material) => {
            /* Precondition: Public key must be defined to support encrypt. */
            if (!publicKey)
                throw new Error('No public key defined in constructor.  Encrypt disabled.');
            const { buffer, byteOffset, byteLength } = material_management_node_1.unwrapDataKey(material.getUnencryptedDataKey());
            const encryptedDataKey = crypto_1.publicEncrypt({ key: publicKey, padding, oaepHash }, Buffer.from(buffer, byteOffset, byteLength));
            const providerInfo = this.keyName;
            const providerId = this.keyNamespace;
            const flag = material_management_node_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY;
            const edk = new material_management_node_1.EncryptedDataKey({
                encryptedDataKey,
                providerInfo,
                providerId,
            });
            return material.addEncryptedDataKey(edk, flag);
        };
        const _unwrapKey = async (material, edk) => {
            /* Precondition: Private key must be defined to support decrypt. */
            if (!privateKey)
                throw new Error('No private key defined in constructor.  Decrypt disabled.');
            const trace = {
                keyName: this.keyName,
                keyNamespace: this.keyNamespace,
                flags: material_management_node_1.KeyringTraceFlag.WRAPPING_KEY_DECRYPTED_DATA_KEY,
            };
            const { buffer, byteOffset, byteLength } = edk.encryptedDataKey;
            const encryptedDataKey = Buffer.from(buffer, byteOffset, byteLength);
            const unencryptedDataKey = crypto_1.privateDecrypt({ key: privateKey, padding, oaepHash }, encryptedDataKey);
            return material.setUnencryptedDataKey(unencryptedDataKey, trace);
        };
        material_management_node_1.readOnlyProperty(this, 'keyName', keyName);
        material_management_node_1.readOnlyProperty(this, 'keyNamespace', keyNamespace);
        material_management_node_1.readOnlyProperty(this, '_wrapKey', _wrapKey);
        material_management_node_1.readOnlyProperty(this, '_unwrapKey', _unwrapKey);
    }
    _filter({ providerId, providerInfo }) {
        const { keyNamespace, keyName } = this;
        return providerId === keyNamespace && providerInfo === keyName;
    }
}
exports.RawRsaKeyringNode = RawRsaKeyringNode;
material_management_node_1.immutableClass(RawRsaKeyringNode);
async function randomBytesAsync(size) {
    return new Promise((resolve, reject) => {
        crypto_1.randomBytes(size, (err, buffer) => {
            if (err)
                return reject(err);
            resolve(buffer);
        });
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X3JzYV9rZXlyaW5nX25vZGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcmF3X3JzYV9rZXlyaW5nX25vZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7O0FBRXRDLG1GQWE2QztBQUU3QyxtQ0FPZTtBQUVmLHlEQUtnQztBQUVoQywrREFBeUQ7QUFrQnpELE1BQU0saUJBQWlCLEdBQWU7SUFDcEMsTUFBTTtJQUNOLFFBQVE7SUFDUixRQUFRO0lBQ1IsUUFBUTtJQUNSLFNBQVM7Q0FDVixDQUFBO0FBVUQsTUFBYSxpQkFBa0IsU0FBUSxzQ0FBVztJQU1oRCxZQUFZLEtBQTZCO1FBQ3ZDLEtBQUssRUFBRSxDQUFBO1FBb0ZULGVBQVUsR0FBRyx3QkFBVSxDQUNyQixnQkFBZ0IsQ0FDakIsQ0FBQTtRQUNELGVBQVUsR0FBRyx3QkFBVSxFQUF5QyxDQUFBO1FBckY5RCxNQUFNLEVBQ0osTUFBTSxFQUNOLE9BQU8sRUFDUCxZQUFZLEVBQ1osT0FBTyxHQUFHLGtCQUFTLENBQUMsc0JBQXNCLEVBQzFDLFFBQVEsR0FDVCxHQUFHLEtBQUssQ0FBQTtRQUNULE1BQU0sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEdBQUcsTUFBTSxDQUFBO1FBQ3hDLHFGQUFxRjtRQUNyRixnQ0FBSyxDQUFDLFNBQVMsSUFBSSxVQUFVLEVBQUUsa0JBQWtCLENBQUMsQ0FBQTtRQUNsRCx5RkFBeUY7UUFDekYsZ0NBQUssQ0FBQyxPQUFPLElBQUksWUFBWSxFQUFFLDBDQUEwQyxDQUFDLENBQUE7UUFDMUUscUZBQXFGO1FBQ3JGLGdDQUFLLENBQ0gsT0FBTyxLQUFLLGtCQUFTLENBQUMsc0JBQXNCO1lBQzFDLENBQUMsQ0FBQyx1Q0FBaUI7Z0JBQ2pCLENBQUMsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO2dCQUN0QyxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxLQUFL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