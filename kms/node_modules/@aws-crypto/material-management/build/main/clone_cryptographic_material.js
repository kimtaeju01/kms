"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const cryptographic_material_1 = require("./cryptographic_material");
const node_algorithms_1 = require("./node_algorithms");
const needs_1 = require("./needs");
function cloneMaterial(source) {
    const { suite, encryptionContext } = source;
    const clone = (suite instanceof node_algorithms_1.NodeAlgorithmSuite
        ? source instanceof cryptographic_material_1.NodeEncryptionMaterial
            ? new cryptographic_material_1.NodeEncryptionMaterial(suite, encryptionContext)
            : new cryptographic_material_1.NodeDecryptionMaterial(suite, encryptionContext)
        : source instanceof cryptographic_material_1.WebCryptoEncryptionMaterial
            ? new cryptographic_material_1.WebCryptoEncryptionMaterial(suite, encryptionContext)
            : new cryptographic_material_1.WebCryptoDecryptionMaterial(suite, encryptionContext));
    /* The setTrace _must_ be the first trace,
     * If the material is an EncryptionMaterial
     * then the data key *must* have been generated.
     * If the material is DecryptionMaterial
     * then the data key *must* have been decrypted.
     * i.e. the required flags are:
     * WRAPPING_KEY_GENERATED_DATA_KEY, WRAPPING_KEY_DECRYPTED_DATA_KEY
     * These are controlled by the material itself.
     * Furthermore, subsequent trace entries,
     * *must* be in the same order as the added encrypted data keys.
     * See cryptographic_materials.ts `decorateCryptographicMaterial`, `decorateWebCryptoMaterial`.
     */
    const [setTrace, ...traces] = source.keyringTrace.slice();
    if (source.hasUnencryptedDataKey) {
        const udk = cloneUnencryptedDataKey(source.getUnencryptedDataKey());
        clone.setUnencryptedDataKey(udk, setTrace);
    }
    if (source.hasCryptoKey) {
        const cryptoKey = source.getCryptoKey();
        clone.setCryptoKey(cryptoKey, setTrace);
    }
    if (cryptographic_material_1.isEncryptionMaterial(source) && cryptographic_material_1.isEncryptionMaterial(clone)) {
        const encryptedDataKeys = source.encryptedDataKeys;
        /* Precondition: For each encrypted data key, there must be a trace. */
        needs_1.needs(encryptedDataKeys.length === traces.length, 'KeyringTrace length does not match encrypted data keys.');
        encryptedDataKeys.forEach((edk, i) => {
            const { providerInfo, providerId } = edk;
            const { keyNamespace, keyName, flags } = traces[i];
            /* Precondition: The traces must be in the same order as the encrypted data keys. */
            needs_1.needs(keyName === providerInfo && keyNamespace === providerId, 'Keyring trace does not match encrypted data key.');
            clone.addEncryptedDataKey(edk, flags);
        });
        if (source.suite.signatureCurve && source.signatureKey) {
            clone.setSignatureKey(source.signatureKey);
        }
    }
    else if (cryptographic_material_1.isDecryptionMaterial(source) && cryptographic_material_1.isDecryptionMaterial(clone)) {
        /* Precondition: On Decrypt there must not be any additional traces other than the setTrace. */
        needs_1.needs(!traces.length, 'Only 1 trace is valid on DecryptionMaterials.');
        if (source.suite.signatureCurve && source.verificationKey) {
            clone.setVerificationKey(source.verificationKey);
        }
    }
    else {
        throw new Error('Material mismatch');
    }
    return clone;
}
exports.cloneMaterial = cloneMaterial;
function cloneUnencryptedDataKey(dataKey) {
    if (dataKey instanceof Uint8Array) {
        return new Uint8Array(dataKey);
    }
    return dataKey;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xvbmVfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jbG9uZV9jcnlwdG9ncmFwaGljX21hdGVyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOztBQUV0QyxxRUFPaUM7QUFDakMsdURBQXNEO0FBRXRELG1DQUErQjtBQVEvQixTQUFnQixhQUFhLENBQXFCLE1BQVM7SUFDekQsTUFBTSxFQUFFLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxHQUFHLE1BQU0sQ0FBQTtJQUUzQyxNQUFNLEtBQUssR0FBRyxDQUFDLEtBQUssWUFBWSxvQ0FBa0I7UUFDaEQsQ0FBQyxDQUFDLE1BQU0sWUFBWSwrQ0FBc0I7WUFDeEMsQ0FBQyxDQUFDLElBQUksK0NBQXNCLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDO1lBQ3RELENBQUMsQ0FBQyxJQUFJLCtDQUFzQixDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQztRQUN4RCxDQUFDLENBQUMsTUFBTSxZQUFZLG9EQUEyQjtZQUMvQyxDQUFDLENBQUMsSUFBSSxvREFBMkIsQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLENBQUM7WUFDM0QsQ0FBQyxDQUFDLElBQUksb0RBQTJCLENBQUMsS0FBSyxFQUFFLGlCQUFpQixDQUFDLENBQU0sQ0FBQTtJQUVuRTs7Ozs7Ozs7Ozs7T0FXRztJQUNILE1BQU0sQ0FBQyxRQUFRLEVBQUUsR0FBRyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLEtBQUssRUFBRSxDQUFBO0lBRXpELElBQUksTUFBTSxDQUFDLHFCQUFxQixFQUFFO1FBQ2hDLE1BQU0sR0FBRyxHQUFHLHVCQUF1QixDQUFDLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLENBQUE7UUFDbkUsS0FBSyxDQUFDLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxRQUFRLENBQUMsQ0FBQTtLQUMzQztJQUVELElBQUssTUFBc0MsQ0FBQyxZQUFZLEVBQUU7UUFDeEQsTUFBTSxTQUFTLEdBQUksTUFBc0MsQ0FBQyxZQUFZLEVBQUUsQ0FDdkU7UUFBQyxLQUFxQyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUE7S0FDMUU7SUFFRCxJQUFJLDZDQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLDZDQUFvQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQy9ELE1BQU0saUJBQWlCLEdBQUcsTUFBTSxDQUFDLGlCQUFpQixDQUFBO1FBQ2xELHVFQUF1RTtRQUN2RSxhQUFLLENBQ0gsaUJBQWlCLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQzFDLHlEQUF5RCxDQUMxRCxDQUFBO1FBQ0QsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ25DLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLEdBQUcsR0FBRyxDQUFBO1lBQ3hDLE1BQU0sRUFBRSxZQUFZLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQTtZQUNsRCxvRkFBb0Y7WUFDcEYsYUFBSyxDQUNILE9BQU8sS0FBSyxZQUFZLElBQUksWUFBWSxLQUFLLFVBQVUsRUFDdkQsa0RBQWtELENBQ25ELENBQUE7WUFDRCxLQUFLLENBQUMsbUJBQW1CLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1FBQ3ZDLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsWUFBWSxFQUFFO1lBQ3RELEtBQUssQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFBO1NBQzNDO0tBQ0Y7U0FBTSxJQUFJLDZDQUFvQixDQUFDLE1BQU0sQ0FBQyxJQUFJLDZDQUFvQixDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3RFLCtGQUErRjtRQUMvRixhQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLCtDQUErQyxDQUFDLENBQUE7UUFDdEUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsZUFBZSxFQUFFO1lBQ3pELEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUE7U0FDakQ7S0FDRjtTQUFNO1FBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxDQUFBO0tBQ3JDO0lBRUQsT0FBTyxLQUFLLENBQUE7QUFDZCxDQUFDO0FBbkVELHNDQW1FQztBQUVELFNBQVMsdUJBQXVCLENBQUMsT0FBc0M7SUFDckUsSUFBSSxPQUFPLFlBQVksVUFBVSxFQUFFO1FBQ2pDLE9BQU8sSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUE7S0FDL0I7SUFDRCxPQUFPLE9BQU8sQ0FBQTtBQUNoQixDQUFDIn0=