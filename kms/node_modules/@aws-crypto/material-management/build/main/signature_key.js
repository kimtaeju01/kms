"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const ecc_encode_1 = require("./ecc_encode");
const ecc_decode_1 = require("./ecc_decode");
const immutable_class_1 = require("./immutable_class");
const pem_helpers_1 = require("./pem_helpers");
/*
 * This public interface to the SignatureKey object is provided for
 * developers of CMMs and keyrings only. If you are a user of the AWS Encryption
 * SDK and you are not developing your own CMMs and/or keyrings, you do not
 * need to use it and you should not do so.
 */
class SignatureKey {
    constructor(privateKey, compressPoint, suite) {
        const { signatureCurve: namedCurve } = suite;
        /* Precondition: Do not create a SignatureKey for an algorithm suite that does not have an EC named curve. */
        if (!namedCurve)
            throw new Error('Unsupported Algorithm');
        /* This is unfortunately complicated.  Node v11 crypto will accept
         * a PEM formated Buffer to sign.  But the ECDH class will still
         * return Buffers that are not PEM formated, but _only_ the points
         * on the curve.  This means I have to make a choice about
         * formating.  I chose to assume that t Buffer/Uin8Array is
         * _only_ the raw points.
         */
        if (privateKey instanceof Uint8Array) {
            const pem = pem_helpers_1.privateKeyPem(namedCurve, fromBuffer(privateKey), fromBuffer(compressPoint));
            immutable_class_1.readOnlyProperty(this, 'privateKey', pem);
        }
        else {
            immutable_class_1.readOnlyProperty(this, 'privateKey', privateKey);
        }
        immutable_class_1.readOnlyBinaryProperty(this, 'compressPoint', compressPoint);
        immutable_class_1.readOnlyProperty(this, 'signatureCurve', namedCurve);
        Object.setPrototypeOf(this, SignatureKey.prototype);
        Object.freeze(this);
    }
    static encodeCompressPoint(publicKeyBytes, suite) {
        const { signatureCurve: namedCurve } = suite;
        /* Precondition: Do not return a compress point for an algorithm suite that does not have an EC named curve. */
        if (!namedCurve)
            throw new Error('Unsupported Algorithm');
        return ecc_encode_1.encodeNamedCurves[namedCurve](publicKeyBytes);
    }
}
exports.SignatureKey = SignatureKey;
immutable_class_1.frozenClass(SignatureKey);
class VerificationKey {
    constructor(publicKey, suite) {
        const { signatureCurve: namedCurve } = suite;
        /* Precondition: Do not create a VerificationKey for an algorithm suite that does not have an EC named curve. */
        if (!namedCurve)
            throw new Error('Unsupported Algorithm');
        /* This is unfortunately complicated.  Node v11 crypto will accept
         * a PEM formated Buffer to verify.  But the ECDH class will still
         * return Buffers that are not PEM formated, but _only_ the points
         * on the curve.  This means I have to make a choice about
         * formating.  I chose to assume that the Buffer/Uin8Array is
         * _only_ the raw points.
         */
        if (publicKey instanceof Uint8Array) {
            const pem = pem_helpers_1.publicKeyPem(namedCurve, fromBuffer(publicKey));
            immutable_class_1.readOnlyProperty(this, 'publicKey', pem);
        }
        else {
            immutable_class_1.readOnlyProperty(this, 'publicKey', publicKey);
        }
        immutable_class_1.readOnlyProperty(this, 'signatureCurve', namedCurve);
        Object.setPrototypeOf(this, VerificationKey.prototype);
        Object.freeze(this);
    }
    static decodeCompressPoint(compressPoint, suite) {
        const { signatureCurve: namedCurve } = suite;
        /* Precondition: Do not decode a public key for an algorithm suite that does not have an EC named curve. */
        if (!namedCurve)
            throw new Error('Unsupported Algorithm');
        return ecc_decode_1.decodeNamedCurves[namedCurve](compressPoint);
    }
}
exports.VerificationKey = VerificationKey;
immutable_class_1.frozenClass(VerificationKey);
function fromBuffer(uint) {
    const { buffer, byteOffset, byteLength } = uint;
    return Buffer.from(buffer, byteOffset, byteLength);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2lnbmF0dXJlX2tleS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zaWduYXR1cmVfa2V5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOztBQU90Qyw2Q0FBZ0Q7QUFDaEQsNkNBQWdEO0FBQ2hELHVEQUkwQjtBQUMxQiwrQ0FBMkQ7QUFHM0Q7Ozs7O0dBS0c7QUFFSCxNQUFhLFlBQVk7SUFJdkIsWUFDRSxVQUEyQyxFQUMzQyxhQUF5QixFQUN6QixLQUFxQjtRQUVyQixNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUM1Qyw2R0FBNkc7UUFDN0csSUFBSSxDQUFDLFVBQVU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUE7UUFDekQ7Ozs7OztXQU1HO1FBQ0gsSUFBSSxVQUFVLFlBQVksVUFBVSxFQUFFO1lBQ3BDLE1BQU0sR0FBRyxHQUFHLDJCQUFhLENBQ3ZCLFVBQVUsRUFDVixVQUFVLENBQUMsVUFBVSxDQUFDLEVBQ3RCLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FDMUIsQ0FBQTtZQUNELGtDQUFnQixDQUE2QixJQUFJLEVBQUUsWUFBWSxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ3RFO2FBQU07WUFDTCxrQ0FBZ0IsQ0FDZCxJQUFJLEVBQ0osWUFBWSxFQUNaLFVBQVUsQ0FDWCxDQUFBO1NBQ0Y7UUFDRCx3Q0FBc0IsQ0FBQyxJQUFJLEVBQUUsZUFBZSxFQUFFLGFBQWEsQ0FBQyxDQUFBO1FBQzVELGtDQUFnQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQTtRQUNwRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDbkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUN4QixjQUEwQixFQUMxQixLQUFxQjtRQUVyQixNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUM1QywrR0FBK0c7UUFDL0csSUFBSSxDQUFDLFVBQVU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUE7UUFDekQsT0FBTyw4QkFBaUIsQ0FBQyxVQUFVLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQTtJQUN0RCxDQUFDO0NBQ0Y7QUFoREQsb0NBZ0RDO0FBQ0QsNkJBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQTtBQUV6QixNQUFhLGVBQWU7SUFHMUIsWUFDRSxTQUEwQyxFQUMxQyxLQUFxQjtRQUVyQixNQUFNLEVBQUUsY0FBYyxFQUFFLFVBQVUsRUFBRSxHQUFHLEtBQUssQ0FBQTtRQUM1QyxnSEFBZ0g7UUFDaEgsSUFBSSxDQUFDLFVBQVU7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUE7UUFDekQ7Ozs7OztXQU1HO1FBQ0gsSUFBSSxTQUFTLFlBQVksVUFBVSxFQUFFO1lBQ25DLE1BQU0sR0FBRyxHQUFHLDBCQUFZLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO1lBQzNELGtDQUFnQixDQUErQixJQUFJLEVBQUUsV0FBVyxFQUFFLEdBQUcsQ0FBQyxDQUFBO1NBQ3ZFO2FBQU07WUFDTCxrQ0FBZ0IsQ0FDZCxJQUFJLEVBQ0osV0FBVyxFQUNYLFNBQVMsQ0FDVixDQUFBO1NBQ0Y7UUFDRCxrQ0FBZ0IsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUE7UUFDcEQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBQ3RELE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUE7SUFDckIsQ0FBQztJQUVELE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxhQUF5QixFQUFFLEtBQXFCO1FBQ3pFLE1BQU0sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBQzVDLDJHQUEyRztRQUMzRyxJQUFJLENBQUMsVUFBVTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLENBQUMsQ0FBQTtRQUV6RCxPQUFPLDhCQUFpQixDQUFDLFVBQVUsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBQ3JELENBQUM7Q0FDRjtBQXZDRCwwQ0F1Q0M7QUFDRCw2QkFBVyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0FBRTVCLFNBQVMsVUFBVSxDQUFDLElBQWdCO0lBQ2xDLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxHQUFHLElBQUksQ0FBQTtJQUMvQyxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLENBQUMsQ0FBQTtBQUNwRCxDQUFDIn0=