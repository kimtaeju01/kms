/// <reference types="node" />
import { NodeAlgorithmSuite } from './node_algorithms';
import { WebCryptoAlgorithmSuite } from './web_crypto_algorithms';
import { EncryptedDataKey } from './encrypted_data_key';
import { NodeEncryptionMaterial, WebCryptoEncryptionMaterial, NodeDecryptionMaterial, WebCryptoDecryptionMaterial } from './cryptographic_material';
export declare type EncryptionContext = {
    [index: string]: string;
};
export interface AwsEsdkJsKeyAlgorithm {
    name: string;
}
export declare type AwsEsdkJsKeyType = 'public' | 'private' | 'secret';
export declare type AwsEsdkJsKeyUsage = 'encrypt' | 'decrypt' | 'sign' | 'verify' | 'deriveKey' | 'deriveBits' | 'wrapKey' | 'unwrapKey';
export interface AwsEsdkJsCryptoKey {
    readonly algorithm: AwsEsdkJsKeyAlgorithm;
    readonly extractable: boolean;
    readonly type: AwsEsdkJsKeyType;
    readonly usages: AwsEsdkJsKeyUsage[];
}
export declare type MixedBackendCryptoKey = {
    nonZeroByteCryptoKey: AwsEsdkJsCryptoKey;
    zeroByteCryptoKey: AwsEsdkJsCryptoKey;
};
export interface EncryptionRequest<S extends NodeAlgorithmSuite | WebCryptoAlgorithmSuite> {
    readonly suite?: S;
    readonly encryptionContext: EncryptionContext;
    readonly plaintextLength?: number;
}
export interface DecryptionRequest<S extends NodeAlgorithmSuite | WebCryptoAlgorithmSuite> {
    readonly suite: S;
    readonly encryptionContext: EncryptionContext;
    readonly encryptedDataKeys: ReadonlyArray<EncryptedDataKey>;
}
export declare type SupportedAlgorithmSuites = NodeAlgorithmSuite | WebCryptoAlgorithmSuite;
export declare type EncryptionMaterial<Suite> = Suite extends NodeAlgorithmSuite ? NodeEncryptionMaterial : Suite extends WebCryptoAlgorithmSuite ? WebCryptoEncryptionMaterial : never;
export declare type DecryptionMaterial<Suite> = Suite extends NodeAlgorithmSuite ? NodeDecryptionMaterial : Suite extends WebCryptoAlgorithmSuite ? WebCryptoDecryptionMaterial : never;
export declare type AwsEsdkKeyObjectType = 'secret' | 'public' | 'private';
export declare type AwsEsdkKeyFormat = 'pem' | 'der';
export declare type AwsEsdkKeyType = 'rsa' | 'dsa' | 'ec';
export interface AwsEsdkKeyExportOptions<T extends AwsEsdkKeyFormat> {
    type: 'pkcs1' | 'spki' | 'pkcs8' | 'sec1';
    format: T;
    cipher?: string;
    passphrase?: string | Buffer;
}
export interface AwsEsdkKeyObject {
    asymmetricKeyType?: AwsEsdkKeyType;
    /**
     * For asymmetric keys, this property represents the size of the embedded key in
     * bytes. This property is `undefined` for symmetric keys.
     */
    asymmetricKeySize?: number;
    export(options: AwsEsdkKeyExportOptions<'pem'>): string | Buffer;
    export(options?: AwsEsdkKeyExportOptions<'der'>): Buffer;
    symmetricSize?: number;
    type: AwsEsdkKeyObjectType;
}
export declare type AwsEsdkCreateSecretKey = (key: Uint8Array) => AwsEsdkKeyObject;
//# sourceMappingURL=types.d.ts.map