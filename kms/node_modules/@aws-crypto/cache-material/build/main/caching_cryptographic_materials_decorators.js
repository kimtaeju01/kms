"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_1 = require("@aws-crypto/material-management");
const serialize_1 = require("@aws-crypto/serialize");
function decorateProperties(obj, input) {
    const { cache, backingMaterialsManager, maxAge, maxBytesEncrypted, maxMessagesEncrypted, partition, } = input;
    /* Precondition: A caching material manager needs a cache. */
    material_management_1.needs(cache, 'You must provide a cache.');
    /* Precondition: A caching material manager needs a way to get material. */
    material_management_1.needs(backingMaterialsManager, 'You must provide a backing material source.');
    /* Precondition: You *can not* cache something forever. */
    material_management_1.needs(maxAge > 0, 'You must configure a maxAge');
    /* Precondition: maxBytesEncrypted must be inside bounds.  i.e. positive and not more than the maximum. */
    material_management_1.needs(!maxBytesEncrypted ||
        (maxBytesEncrypted > 0 &&
            serialize_1.Maximum.BYTES_PER_CACHED_KEY_LIMIT >= maxBytesEncrypted), 'maxBytesEncrypted is outside of bounds.');
    /* Precondition: maxMessagesEncrypted must be inside bounds.  i.e. positive and not more than the maximum. */
    material_management_1.needs(!maxMessagesEncrypted ||
        (maxMessagesEncrypted > 0 &&
            serialize_1.Maximum.MESSAGES_PER_CACHED_KEY_LIMIT >= maxMessagesEncrypted), 'maxMessagesEncrypted is outside of bounds.');
    /* Precondition: partition must be a string. */
    material_management_1.needs(partition && typeof partition === 'string', 'partition must be a string.');
    material_management_1.readOnlyProperty(obj, '_cache', cache);
    material_management_1.readOnlyProperty(obj, '_backingMaterialsManager', backingMaterialsManager);
    material_management_1.readOnlyProperty(obj, '_maxAge', maxAge);
    material_management_1.readOnlyProperty(obj, '_maxBytesEncrypted', maxBytesEncrypted || serialize_1.Maximum.BYTES_PER_CACHED_KEY_LIMIT);
    material_management_1.readOnlyProperty(obj, '_maxMessagesEncrypted', maxMessagesEncrypted || serialize_1.Maximum.MESSAGES_PER_CACHED_KEY_LIMIT);
    material_management_1.readOnlyProperty(obj, '_partition', partition);
}
exports.decorateProperties = decorateProperties;
function getEncryptionMaterials({ buildEncryptionMaterialCacheKey, }) {
    return async function getEncryptionMaterials(request) {
        const { suite, encryptionContext, plaintextLength } = request;
        /* Check for early return (Postcondition): If I can not cache the EncryptionMaterial, do not even look. */
        if ((suite && !suite.cacheSafe) ||
            typeof plaintextLength !== 'number' ||
            plaintextLength < 0) {
            return this._backingMaterialsManager.getEncryptionMaterials(request);
        }
        const cacheKey = await buildEncryptionMaterialCacheKey(this._partition, {
            suite,
            encryptionContext,
        });
        const entry = this._cache.getEncryptionMaterial(cacheKey, plaintextLength);
        /* Check for early return (Postcondition): If I have a valid EncryptionMaterial, return it. */
        if (entry && !this._cacheEntryHasExceededLimits(entry)) {
            return cloneResponse(entry.response);
        }
        else {
            this._cache.del(cacheKey);
        }
        const material = await this._backingMaterialsManager
            /* Strip any information about the plaintext from the backing request,
             * because the resulting response may be used to encrypt multiple plaintexts.
             */
            .getEncryptionMaterials({ suite, encryptionContext, plaintextLength });
        /* Check for early return (Postcondition): If I can not cache the EncryptionMaterial, just return it. */
        if (!material.suite.cacheSafe)
            return material;
        /* It is possible for an entry to exceed limits immediately.
         * The simplest case is to need to encrypt more than then maxBytesEncrypted.
         * In this case, I return the response to encrypt the data,
         * but do not put a know invalid item into the cache.
         */
        const testEntry = {
            response: material,
            now: Date.now(),
            messagesEncrypted: 1,
            bytesEncrypted: plaintextLength,
        };
        if (!this._cacheEntryHasExceededLimits(testEntry)) {
            this._cache.putEncryptionMaterial(cacheKey, material, plaintextLength, this._maxAge);
            return cloneResponse(material);
        }
        else {
            /* Postcondition: If the material has exceeded limits it MUST NOT be cloned.
             * If it is cloned, and the clone is returned,
             * then there exist a copy of the unencrypted data key.
             * It is true that this data would be caught by GC, it is better to just not rely on that.
             */
            return material;
        }
    };
}
exports.getEncryptionMaterials = getEncryptionMaterials;
function decryptMaterials({ buildDecryptionMaterialCacheKey, }) {
    return async function decryptMaterials(request) {
        const { suite } = request;
        /* Check for early return (Postcondition): If I can not cache the DecryptionMaterial, do not even look. */
        if (!suite.cacheSafe) {
            return this._backingMaterialsManager.decryptMaterials(request);
        }
        const cacheKey = await buildDecryptionMaterialCacheKey(this._partition, request);
        const entry = this._cache.getDecryptionMaterial(cacheKey);
        /* Check for early return (Postcondition): If I have a valid DecryptionMaterial, return it. */
        if (entry && !this._cacheEntryHasExceededLimits(entry)) {
            return cloneResponse(entry.response);
        }
        else {
            this._cache.del(cacheKey);
        }
        const material = await this._backingMaterialsManager.decryptMaterials(request);
        this._cache.putDecryptionMaterial(cacheKey, material, this._maxAge);
        return cloneResponse(material);
    };
}
exports.decryptMaterials = decryptMaterials;
function cacheEntryHasExceededLimits() {
    return function cacheEntryHasExceededLimits({ now, messagesEncrypted, bytesEncrypted }) {
        const age = Date.now() - now;
        return (age > this._maxAge ||
            messagesEncrypted > this._maxMessagesEncrypted ||
            bytesEncrypted > this._maxBytesEncrypted);
    };
}
exports.cacheEntryHasExceededLimits = cacheEntryHasExceededLimits;
/**
 * I need to clone the underlying material.
 * Because when the Encryption SDK is done with material, it will zero it out.
 * Plucking off the material and cloning just that and then returning the rest of the response
 * can just be handled in one place.
 * @param material EncryptionMaterial|DecryptionMaterial
 * @return EncryptionMaterial|DecryptionMaterial
 */
function cloneResponse(material) {
    return material_management_1.cloneMaterial(material);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZ19jcnlwdG9ncmFwaGljX21hdGVyaWFsc19kZWNvcmF0b3JzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2NhY2hpbmdfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbHNfZGVjb3JhdG9ycy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7QUFFdEMseUVBYXdDO0FBQ3hDLHFEQUErQztBQU8vQyxTQUFnQixrQkFBa0IsQ0FDaEMsR0FBK0IsRUFDL0IsS0FBOEM7SUFFOUMsTUFBTSxFQUNKLEtBQUssRUFDTCx1QkFBdUIsRUFDdkIsTUFBTSxFQUNOLGlCQUFpQixFQUNqQixvQkFBb0IsRUFDcEIsU0FBUyxHQUNWLEdBQUcsS0FBSyxDQUFBO0lBRVQsNkRBQTZEO0lBQzdELDJCQUFLLENBQUMsS0FBSyxFQUFFLDJCQUEyQixDQUFDLENBQUE7SUFDekMsMkVBQTJFO0lBQzNFLDJCQUFLLENBQUMsdUJBQXVCLEVBQUUsNkNBQTZDLENBQUMsQ0FBQTtJQUM3RSwwREFBMEQ7SUFDMUQsMkJBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLDZCQUE2QixDQUFDLENBQUE7SUFDaEQsMEdBQTBHO0lBQzFHLDJCQUFLLENBQ0gsQ0FBQyxpQkFBaUI7UUFDaEIsQ0FBQyxpQkFBaUIsR0FBRyxDQUFDO1lBQ3BCLG1CQUFPLENBQUMsMEJBQTBCLElBQUksaUJBQWlCLENBQUMsRUFDNUQseUNBQXlDLENBQzFDLENBQUE7SUFDRCw2R0FBNkc7SUFDN0csMkJBQUssQ0FDSCxDQUFDLG9CQUFvQjtRQUNuQixDQUFDLG9CQUFvQixHQUFHLENBQUM7WUFDdkIsbUJBQU8sQ0FBQyw2QkFBNkIsSUFBSSxvQkFBb0IsQ0FBQyxFQUNsRSw0Q0FBNEMsQ0FDN0MsQ0FBQTtJQUNELCtDQUErQztJQUMvQywyQkFBSyxDQUNILFNBQVMsSUFBSSxPQUFPLFNBQVMsS0FBSyxRQUFRLEVBQzFDLDZCQUE2QixDQUM5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