// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { serializeFactory, uInt16BE } from '@aws-crypto/serialize';
import { compare } from './portable_compare';
//  512 bits of 0 for padding between hashes in decryption materials cache ID generation.
const BIT_PAD_512 = Buffer.alloc(64);
export function buildCryptographicMaterialsCacheKeyHelpers(fromUtf8, toUtf8, sha512) {
    const { serializeEncryptionContext, serializeEncryptedDataKey, } = serializeFactory(fromUtf8);
    return {
        buildEncryptionMaterialCacheKey,
        buildDecryptionMaterialCacheKey,
        encryptedDataKeysHash,
        encryptionContextHash,
    };
    async function buildEncryptionMaterialCacheKey(partition, { suite, encryptionContext }) {
        const algorithmInfo = suite
            ? [new Uint8Array([1]), uInt16BE(suite.id)]
            : [new Uint8Array([0])];
        const key = await sha512(await sha512(fromUtf8(partition)), ...algorithmInfo, await encryptionContextHash(encryptionContext));
        return toUtf8(key);
    }
    async function buildDecryptionMaterialCacheKey(partition, { suite, encryptedDataKeys, encryptionContext }) {
        const { id } = suite;
        const key = await sha512(await sha512(fromUtf8(partition)), uInt16BE(id), ...(await encryptedDataKeysHash(encryptedDataKeys)), BIT_PAD_512, await encryptionContextHash(encryptionContext));
        return toUtf8(key);
    }
    async function encryptedDataKeysHash(encryptedDataKeys) {
        const hashes = await Promise.all(encryptedDataKeys
            .map(serializeEncryptedDataKey)
            .map(async (edk) => sha512(edk)));
        return hashes.sort(compare);
    }
    async function encryptionContextHash(context) {
        /* The AAD section is uInt16BE(length) + AAD
         * see: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-aad
         * However, the RAW Keyring wants _only_ the ADD.
         * So, I just slice off the length.
         */
        const serializedContext = serializeEncryptionContext(context).slice(2);
        return sha512(serializedContext);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGRfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbHNfY2FjaGVfa2V5X2hlbHBlcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvYnVpbGRfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbHNfY2FjaGVfa2V5X2hlbHBlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQztBQVN0QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUE7QUFDbEUsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLG9CQUFvQixDQUFBO0FBRTVDLHlGQUF5RjtBQUN6RixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO0FBRXBDLE1BQU0sVUFBVSwwQ0FBMEMsQ0FHeEQsUUFBdUMsRUFDdkMsTUFBcUMsRUFDckMsTUFBaUU7SUFFakUsTUFBTSxFQUNKLDBCQUEwQixFQUMxQix5QkFBeUIsR0FDMUIsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUU5QixPQUFPO1FBQ0wsK0JBQStCO1FBQy9CLCtCQUErQjtRQUMvQixxQkFBcUI7UUFDckIscUJBQXFCO0tBQ3RCLENBQUE7SUFFRCxLQUFLLFVBQVUsK0JBQStCLENBQzVDLFNBQWlCLEVBQ2pCLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUF3QjtRQUVsRCxNQUFNLGFBQWEsR0FBRyxLQUFLO1lBQ3pCLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxRQUFRLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxDQUFDLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBRXpCLE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUN0QixNQUFNLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFDakMsR0FBRyxhQUFhLEVBQ2hCLE1BQU0scUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FDL0MsQ0FBQTtRQUNELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxLQUFLLFVBQVUsK0JBQStCLENBQzVDLFNBQWlCLEVBQ2pCLEVBQUUsS0FBSyxFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixFQUF3QjtRQUVyRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEdBQUcsS0FBSyxDQUFBO1FBRXBCLE1BQU0sR0FBRyxHQUFHLE1BQU0sTUFBTSxDQUN0QixNQUFNLE1BQU0sQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFDakMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxFQUNaLEdBQUcsQ0FBQyxNQUFNLHFCQUFxQixDQUFDLGlCQUFpQixDQUFDLENBQUMsRUFDbkQsV0FBVyxFQUNYLE1BQU0scUJBQXFCLENBQUMsaUJBQWlCLENBQUMsQ0FDL0MsQ0FBQTtRQUNELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0lBQ3BCLENBQUM7SUFFRCxLQUFLLFVBQVUscUJBQXFCLENBQ2xDLGlCQUFrRDtRQUVsRCxNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQzlCLGlCQUFpQjthQUNkLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQzthQUM5QixHQUFHLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ25DLENBQUE7UUFDRCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDN0IsQ0FBQztJQUVELEtBQUssVUFBVSxxQkFBcUIsQ0FBQyxPQUEwQjtRQUM3RDs7OztXQUlHO1FBQ0gsTUFBTSxpQkFBaUIsR0FBRywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDdEUsT0FBTyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQTtJQUNsQyxDQUFDO0FBQ0gsQ0FBQyJ9