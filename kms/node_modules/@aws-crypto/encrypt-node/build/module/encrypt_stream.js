// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { NodeDefaultCryptographicMaterialsManager, NodeAlgorithmSuite, KeyringNode, getEncryptHelper, needs, } from '@aws-crypto/material-management-node';
import { getFramedEncryptStream } from './framed_encrypt_stream';
import { SignatureStream } from './signature_stream';
import Duplexify from 'duplexify';
import { randomBytes } from 'crypto';
import { serializeFactory, kdfInfo, ContentType, SerializationVersion, ObjectType, FRAME_LENGTH, MESSAGE_ID_LENGTH, Maximum, } from '@aws-crypto/serialize';
// @ts-ignore
import { pipeline } from 'readable-stream';
const fromUtf8 = (input) => Buffer.from(input, 'utf8');
const { serializeMessageHeader, headerAuthIv } = serializeFactory(fromUtf8);
/**
 * Takes a NodeDefaultCryptographicMaterialsManager or a KeyringNode that will
 * be wrapped in a NodeDefaultCryptographicMaterialsManager and returns a stream.
 *
 * @param cmm NodeMaterialsManager|KeyringNode
 * @param op EncryptStreamInput
 */
export function encryptStream(cmm, op = {}) {
    const { suiteId, encryptionContext = {}, frameLength = FRAME_LENGTH, plaintextLength, } = op;
    /* Precondition: The frameLength must be less than the maximum frame size Node.js stream. */
    needs(frameLength > 0 && Maximum.FRAME_SIZE >= frameLength, `frameLength out of bounds: 0 > frameLength >= ${Maximum.FRAME_SIZE}`);
    /* If the cmm is a Keyring, wrap it with NodeDefaultCryptographicMaterialsManager. */
    cmm =
        cmm instanceof KeyringNode
            ? new NodeDefaultCryptographicMaterialsManager(cmm)
            : cmm;
    const suite = suiteId && new NodeAlgorithmSuite(suiteId);
    const wrappingStream = new Duplexify();
    cmm
        .getEncryptionMaterials({ suite, encryptionContext, plaintextLength })
        .then(async (material) => {
        const { dispose, getSigner } = getEncryptHelper(material);
        const { getCipher, messageHeader, rawHeader } = getEncryptionInfo(material, frameLength);
        wrappingStream.emit('MessageHeader', messageHeader);
        const encryptStream = getFramedEncryptStream(getCipher, messageHeader, dispose, plaintextLength);
        const signatureStream = new SignatureStream(getSigner);
        pipeline(encryptStream, signatureStream);
        wrappingStream.setReadable(signatureStream);
        // Flush the rawHeader through the signatureStream
        rawHeader.forEach((buff) => signatureStream.write(buff));
        // @ts-ignore until readable-stream exports v3 types...
        wrappingStream.setWritable(encryptStream);
    })
        .catch((err) => wrappingStream.emit('error', err));
    return wrappingStream;
}
export function getEncryptionInfo(material, frameLength) {
    const { kdfGetCipher } = getEncryptHelper(material);
    const { encryptionContext } = material;
    const messageId = randomBytes(MESSAGE_ID_LENGTH);
    const { id, ivLength } = material.suite;
    const messageHeader = Object.freeze({
        version: SerializationVersion.V1,
        type: ObjectType.CUSTOMER_AE_DATA,
        suiteId: id,
        messageId,
        encryptionContext,
        encryptedDataKeys: Object.freeze(material.encryptedDataKeys),
        contentType: ContentType.FRAMED_DATA,
        headerIvLength: ivLength,
        frameLength,
    });
    const { buffer, byteOffset, byteLength } = serializeMessageHeader(messageHeader);
    const headerBuffer = Buffer.from(buffer, byteOffset, byteLength);
    const info = kdfInfo(messageHeader.suiteId, messageHeader.messageId);
    const getCipher = kdfGetCipher(info);
    const headerIv = headerAuthIv(ivLength);
    const validateHeader = getCipher(headerIv);
    validateHeader.setAAD(headerBuffer);
    validateHeader.update(Buffer.alloc(0));
    validateHeader.final();
    const headerAuth = validateHeader.getAuthTag();
    return {
        getCipher,
        messageHeader,
        rawHeader: [headerBuffer, headerIv, headerAuth],
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdF9zdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5jcnlwdF9zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQztBQUV0QyxPQUFPLEVBQ0wsd0NBQXdDLEVBQ3hDLGtCQUFrQixFQUVsQixXQUFXLEVBRVgsZ0JBQWdCLEVBR2hCLEtBQUssR0FDTixNQUFNLHNDQUFzQyxDQUFBO0FBQzdDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHlCQUF5QixDQUFBO0FBQ2hFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQTtBQUNwRCxPQUFPLFNBQVMsTUFBTSxXQUFXLENBQUE7QUFDakMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFFBQVEsQ0FBQTtBQUNwQyxPQUFPLEVBRUwsZ0JBQWdCLEVBQ2hCLE9BQU8sRUFDUCxXQUFXLEVBQ1gsb0JBQW9CLEVBQ3BCLFVBQVUsRUFDVixZQUFZLEVBQ1osaUJBQWlCLEVBQ2pCLE9BQU8sR0FDUixNQUFNLHVCQUF1QixDQUFBO0FBRTlCLGFBQWE7QUFDYixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFHMUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQzlELE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxZQUFZLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQVMzRTs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsYUFBYSxDQUMzQixHQUF1QyxFQUN2QyxLQUF5QixFQUFFO0lBRTNCLE1BQU0sRUFDSixPQUFPLEVBQ1AsaUJBQWlCLEdBQUcsRUFBRSxFQUN0QixXQUFXLEdBQUcsWUFBWSxFQUMxQixlQUFlLEdBQ2hCLEdBQUcsRUFBRSxDQUFBO0lBRU4s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