"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_node_1 = require("@aws-crypto/material-management-node");
const framed_encrypt_stream_1 = require("./framed_encrypt_stream");
const signature_stream_1 = require("./signature_stream");
const duplexify_1 = __importDefault(require("duplexify"));
const crypto_1 = require("crypto");
const serialize_1 = require("@aws-crypto/serialize");
// @ts-ignore
const readable_stream_1 = require("readable-stream");
const fromUtf8 = (input) => Buffer.from(input, 'utf8');
const { serializeMessageHeader, headerAuthIv } = serialize_1.serializeFactory(fromUtf8);
/**
 * Takes a NodeDefaultCryptographicMaterialsManager or a KeyringNode that will
 * be wrapped in a NodeDefaultCryptographicMaterialsManager and returns a stream.
 *
 * @param cmm NodeMaterialsManager|KeyringNode
 * @param op EncryptStreamInput
 */
function encryptStream(cmm, op = {}) {
    const { suiteId, encryptionContext = {}, frameLength = serialize_1.FRAME_LENGTH, plaintextLength, } = op;
    /* Precondition: The frameLength must be less than the maximum frame size Node.js stream. */
    material_management_node_1.needs(frameLength > 0 && serialize_1.Maximum.FRAME_SIZE >= frameLength, `frameLength out of bounds: 0 > frameLength >= ${serialize_1.Maximum.FRAME_SIZE}`);
    /* If the cmm is a Keyring, wrap it with NodeDefaultCryptographicMaterialsManager. */
    cmm =
        cmm instanceof material_management_node_1.KeyringNode
            ? new material_management_node_1.NodeDefaultCryptographicMaterialsManager(cmm)
            : cmm;
    const suite = suiteId && new material_management_node_1.NodeAlgorithmSuite(suiteId);
    const wrappingStream = new duplexify_1.default();
    cmm
        .getEncryptionMaterials({ suite, encryptionContext, plaintextLength })
        .then(async (material) => {
        const { dispose, getSigner } = material_management_node_1.getEncryptHelper(material);
        const { getCipher, messageHeader, rawHeader } = getEncryptionInfo(material, frameLength);
        wrappingStream.emit('MessageHeader', messageHeader);
        const encryptStream = framed_encrypt_stream_1.getFramedEncryptStream(getCipher, messageHeader, dispose, plaintextLength);
        const signatureStream = new signature_stream_1.SignatureStream(getSigner);
        readable_stream_1.pipeline(encryptStream, signatureStream);
        wrappingStream.setReadable(signatureStream);
        // Flush the rawHeader through the signatureStream
        rawHeader.forEach((buff) => signatureStream.write(buff));
        // @ts-ignore until readable-stream exports v3 types...
        wrappingStream.setWritable(encryptStream);
    })
        .catch((err) => wrappingStream.emit('error', err));
    return wrappingStream;
}
exports.encryptStream = encryptStream;
function getEncryptionInfo(material, frameLength) {
    const { kdfGetCipher } = material_management_node_1.getEncryptHelper(material);
    const { encryptionContext } = material;
    const messageId = crypto_1.randomBytes(serialize_1.MESSAGE_ID_LENGTH);
    const { id, ivLength } = material.suite;
    const messageHeader = Object.freeze({
        version: serialize_1.SerializationVersion.V1,
        type: serialize_1.ObjectType.CUSTOMER_AE_DATA,
        suiteId: id,
        messageId,
        encryptionContext,
        encryptedDataKeys: Object.freeze(material.encryptedDataKeys),
        contentType: serialize_1.ContentType.FRAMED_DATA,
        headerIvLength: ivLength,
        frameLength,
    });
    const { buffer, byteOffset, byteLength } = serializeMessageHeader(messageHeader);
    const headerBuffer = Buffer.from(buffer, byteOffset, byteLength);
    const info = serialize_1.kdfInfo(messageHeader.suiteId, messageHeader.messageId);
    const getCipher = kdfGetCipher(info);
    const headerIv = headerAuthIv(ivLength);
    const validateHeader = getCipher(headerIv);
    validateHeader.setAAD(headerBuffer);
    validateHeader.update(Buffer.alloc(0));
    validateHeader.final();
    const headerAuth = validateHeader.getAuthTag();
    return {
        getCipher,
        messageHeader,
        rawHeader: [headerBuffer, headerIv, headerAuth],
    };
}
exports.getEncryptionInfo = getEncryptionInfo;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdF9zdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZW5jcnlwdF9zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7Ozs7O0FBRXRDLG1GQVU2QztBQUM3QyxtRUFBZ0U7QUFDaEUseURBQW9EO0FBQ3BELDBEQUFpQztBQUNqQyxtQ0FBb0M7QUFDcEMscURBVThCO0FBRTlCLGFBQWE7QUFDYixxREFBMEM7QUFHMUMsTUFBTSxRQUFRLEdBQUcsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFBO0FBQzlELE1BQU0sRUFBRSxzQkFBc0IsRUFBRSxZQUFZLEVBQUUsR0FBRyw0QkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQTtBQVMzRTs7Ozs7O0dBTUc7QUFDSCxTQUFnQixhQUFhLENBQzNCLEdBQXVDLEVBQ3ZDLEtBQXlCLEVBQUU7SUFFM0IsTUFBTSxFQUNKLE9BQU8sRUFDUCxpQkFBaUIsR0FBRyxFQUFFLEVBQ3RCLFdBQVcsR0FBRyx3QkFBWSxFQUMxQixlQUFlLEdBQ2hCLEdBQUcsRUFBRSxDQUFBO0lBRU4sNEZBQTRGO0lBQzVGLGdDQUFLLENBQ0gsV0FBVyxHQUFHLENBQUMsSUFBSSxtQkFBTyxDQUFDLFVBQVUsSUFBSSxXQUFXLEVBQ3BELGlEQUFpRCxtQkFBTyxDQUFDLFVBQVUsRUFBRSxDQUN0RSxDQUFBO0lBRUQscUZBQXFGO0lBQ3JGLEdBQUc7UUFDRCxHQUFHLFlBQVksc0NBQVc7WUFDeEIsQ0FBQyxDQUFDLElBQUksbUVBQXdDLENBQUMsR0FBRyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxHQUFHLENBQUE7SUFFVCxNQUFNLEtBQUssR0FBRyxPQUFPLElBQUksSUFBSSw2Q0FBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUV4RCxNQUFNLGNBQWMsR0FBRyxJQUFJLG1CQUFTLEVB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