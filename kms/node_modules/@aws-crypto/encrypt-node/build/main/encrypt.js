"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const encrypt_stream_1 = require("./encrypt_stream");
// @ts-ignore
const readable_stream_1 = require("readable-stream");
async function encrypt(cmm, plaintext, op = {}) {
    const { encoding } = op;
    if (plaintext instanceof Uint8Array) {
        op.plaintextLength = plaintext.byteLength;
    }
    else if (typeof plaintext === 'string') {
        plaintext = Buffer.from(plaintext, encoding);
        op.plaintextLength = plaintext.byteLength;
    }
    const stream = encrypt_stream_1.encryptStream(cmm, op);
    const result = [];
    let messageHeader = false;
    stream
        .once('MessageHeader', (header) => {
        messageHeader = header;
    })
        .on('data', (chunk) => result.push(chunk));
    // This will check both Uint8Array|Buffer
    if (plaintext instanceof Uint8Array) {
        stream.end(plaintext);
    }
    else if (plaintext.readable) {
        plaintext.pipe(stream);
    }
    else {
        throw new Error('Unsupported plaintext');
    }
    await finishedAsync(stream);
    if (!messageHeader)
        throw new Error('Unknown format');
    return {
        result: Buffer.concat(result),
        messageHeader,
    };
}
exports.encrypt = encrypt;
async function finishedAsync(stream) {
    return new Promise((resolve, reject) => {
        readable_stream_1.finished(stream, (err) => (err ? reject(err) : resolve()));
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9lbmNyeXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOztBQU10QyxxREFBb0U7QUFFcEUsYUFBYTtBQUNiLHFEQUEwQztBQWFuQyxLQUFLLFVBQVUsT0FBTyxDQUMzQixHQUF1QyxFQUN2QyxTQUEwRSxFQUMxRSxLQUFtQixFQUFFO0lBRXJCLE1BQU0sRUFBRSxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUE7SUFDdkIsSUFBSSxTQUFTLFlBQVksVUFBVSxFQUFFO1FBQ25DLEVBQUUsQ0FBQyxlQUFlLEdBQUcsU0FBUyxDQUFDLFVBQVUsQ0FBQTtLQUMxQztTQUFNLElBQUksT0FBTyxTQUFTLEtBQUssUUFBUSxFQUFFO1FBQ3hDLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQTtRQUM1QyxFQUFFLENBQUMsZUFBZSxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUE7S0FDMUM7SUFFRCxNQUFNLE1BQU0sR0FBRyw4QkFBYSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQTtJQUNyQyxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUE7SUFDM0IsSUFBSSxhQUFhLEdBQTBCLEtBQUssQ0FBQTtJQUNoRCxNQUFNO1NBQ0gsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQ2hDLGFBQWEsR0FBRyxNQUFNLENBQUE7SUFDeEIsQ0FBQyxDQUFDO1NBQ0QsRUFBRSxDQUFDLE1BQU0sRUFBRSxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBO0lBRXBELHlDQUF5QztJQUN6QyxJQUFJLFNBQVMsWUFBWSxVQUFVLEVBQUU7UUFDbkMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQTtLQUN0QjtTQUFNLElBQUksU0FBUyxDQUFDLFFBQVEsRUFBRTtRQUM3QixTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFBO0tBQ3ZCO1NBQU07UUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLHVCQUF1QixDQUFDLENBQUE7S0FDekM7SUFFRCxNQUFNLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtJQUMzQixJQUFJLENBQUMsYUFBYTtRQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtJQUVyRCxPQUFPO1FBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdCLGFBQWE7S0FDZCxDQUFBO0FBQ0gsQ0FBQztBQXRDRCwwQkFzQ0M7QUFFRCxLQUFLLFVBQVUsYUFBYSxDQUFDLE1BQWM7SUFDekMsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQywwQkFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ25FLENBQUMsQ0FBQyxDQUFBO0FBQ0osQ0FBQyJ9