"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_1 = require("@aws-crypto/material-management");
function _onEncrypt(randomBytes) {
    return async function _onEncrypt(material) {
        if (!material.hasUnencryptedDataKey) {
            const trace = {
                keyName: this.keyName,
                keyNamespace: this.keyNamespace,
                flags: material_management_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY,
            };
            const udk = await randomBytes(material.suite.keyLengthBytes);
            material.setUnencryptedDataKey(udk, trace);
        }
        return this._wrapKey(material);
    };
}
exports._onEncrypt = _onEncrypt;
function _onDecrypt() {
    return async function _onDecrypt(material, encryptedDataKeys) {
        /* Check for early return (Postcondition): If the material is already valid, attempting to decrypt is a bad idea. */
        if (material.hasValidKey())
            return material;
        const edks = encryptedDataKeys.filter(this._filter, this);
        /* Check for early return (Postcondition): If there are not EncryptedDataKeys for this keyring, do nothing. */
        if (!edks.length)
            return material;
        for (const edk of edks) {
            try {
                return await this._unwrapKey(material, edk);
            }
            catch (e) {
                // there should be some debug here?  or wrap?
                // Failures decrypt should not short-circuit the process
                // If the caller does not have access they may have access
                // through another Keyring.
            }
        }
        return material;
    };
}
exports._onDecrypt = _onDecrypt;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X2tleXJpbmdfZGVjb3JhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yYXdfa2V5cmluZ19kZWNvcmF0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOztBQUV0Qyx5RUFPd0M7QUFVeEMsU0FBZ0IsVUFBVSxDQUd4QixXQUFtRDtJQUNuRCxPQUFPLEtBQUssVUFBVSxVQUFVLENBRTlCLFFBQStCO1FBRS9CLElBQUksQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUU7WUFDbkMsTUFBTSxLQUFLLEdBQWlCO2dCQUMxQixPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87Z0JBQ3JCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtnQkFDL0IsS0FBSyxFQUFFLHNDQUFnQixDQUFDLCtCQUErQjthQUN4RCxDQUFBO1lBQ0QsTUFBTSxHQUFHLEdBQUcsTUFBTSxXQUFXLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUMsQ0FBQTtZQUM1RCxRQUFRLENBQUMscUJBQXFCLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFBO1NBQzNDO1FBQ0QsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxDQUFBO0lBQ2hDLENBQUMsQ0FBQTtBQUNILENBQUM7QUFuQkQsZ0NBbUJDO0FBRUQsU0FBZ0IsVUFBVTtJQUl4QixPQUFPLEtBQUssVUFBVSxVQUFVLENBRTlCLFFBQStCLEVBQy9CLGlCQUFxQztRQUVyQyxvSEFBb0g7UUFDcEgsSUFBSSxRQUFRLENBQUMsV0FBVyxFQUFFO1lBQUUsT0FBTyxRQUFRLENBQUE7UUFDM0MsTUFBTSxJQUFJLEdBQUcsaUJBQWlCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDekQsOEdBQThHO1FBQzlHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUFFLE9BQU8sUUFBUSxDQUFBO1FBRWpDLEtBQUssTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFO1lBQ3RCLElBQUk7Z0JBQ0YsT0FBTyxNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFBO2FBQzVDO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsNkNBQTZDO2dCQUM3Qyx3REFBd0Q7Z0JBQ3hELDBEQUEwRDtnQkFDMUQsMkJBQTJCO2FBQzVCO1NBQ0Y7UUFFRCxPQUFPLFFBQVEsQ0FBQTtJQUNqQixDQUFDLENBQUE7QUFDSCxDQUFDO0FBNUJELGdDQTRCQyJ9