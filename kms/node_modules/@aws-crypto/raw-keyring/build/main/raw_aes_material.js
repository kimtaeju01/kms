"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
/* Here I am reusing the Material implementation and interface from material-management.
 * This is because there are many security guarantees that this implementations offer
 * that map to the current implementation of raw AES keyrings.
 * The KeyringTrace is an unfortunate case because there is no mapping.
 * However the trade off seems worth it and the convolutions to make it work seem minimal.
 */
const material_management_1 = require("@aws-crypto/material-management");
const raw_aes_algorithm_suite_1 = require("./raw_aes_algorithm_suite");
class NodeRawAesMaterial {
    constructor(suiteId) {
        this.keyringTrace = [];
        this.encryptionContext = Object.freeze({});
        /* Precondition: NodeRawAesMaterial suiteId must be RawAesWrappingSuiteIdentifier. */
        material_management_1.needs(raw_aes_algorithm_suite_1.RawAesWrappingSuiteIdentifier[suiteId], 'suiteId not supported.');
        this.suite = new material_management_1.NodeAlgorithmSuite(suiteId);
        /* NodeRawAesMaterial need to set a flag, this is an abuse of TraceFlags
         * because the material is not generated.
         * but CryptographicMaterial force a flag to be set.
         */
        const setFlags = material_management_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY;
        material_management_1.decorateCryptographicMaterial(this, setFlags);
        Object.setPrototypeOf(this, NodeRawAesMaterial.prototype);
        Object.freeze(this);
    }
    hasValidKey() {
        return this.hasUnencryptedDataKey;
    }
}
exports.NodeRawAesMaterial = NodeRawAesMaterial;
material_management_1.frozenClass(NodeRawAesMaterial);
class WebCryptoRawAesMaterial {
    constructor(suiteId) {
        this.keyringTrace = [];
        this.encryptionContext = Object.freeze({});
        /* Precondition: WebCryptoAlgorithmSuite suiteId must be RawAesWrappingSuiteIdentifier. */
        material_management_1.needs(raw_aes_algorithm_suite_1.RawAesWrappingSuiteIdentifier[suiteId], 'suiteId not supported.');
        this.suite = new material_management_1.WebCryptoAlgorithmSuite(suiteId);
        this.validUsages = Object.freeze([
            'decrypt',
            'encrypt',
        ]);
        /* WebCryptoRawAesMaterial need to set a flag, this is an abuse of TraceFlags
         * because the material is not generated.
         * but CryptographicMaterial force a flag to be set.
         */
        const setFlag = material_management_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY;
        material_management_1.decorateCryptographicMaterial(this, setFlag);
        material_management_1.decorateWebCryptoMaterial(this, setFlag);
        Object.setPrototypeOf(this, WebCryptoRawAesMaterial.prototype);
        Object.freeze(this);
    }
    hasValidKey() {
        return this.hasUnencryptedDataKey && this.hasCryptoKey;
    }
}
exports.WebCryptoRawAesMaterial = WebCryptoRawAesMaterial;
material_management_1.frozenClass(WebCryptoRawAesMaterial);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmF3X2Flc19tYXRlcmlhbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9yYXdfYWVzX21hdGVyaWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOztBQUV0Qzs7Ozs7R0FLRztBQUVILHlFQWdCd0M7QUFFeEMsdUVBR2tDO0FBRWxDLE1BQWEsa0JBQWtCO0lBWTdCLFlBQVksT0FBZ0M7UUFGNUMsaUJBQVksR0FBbUIsRUFBRSxDQUFBO1FBQ2pDLHNCQUFpQixHQUFzQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRXRELHFGQUFxRjtRQUNyRiwyQkFBSyxDQUFDLHVEQUE2QixDQUFDLE9BQU8sQ0FBQyxFQUFFLHdCQUF3QixDQUFDLENBQUE7UUFDdkUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLHdDQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQzVDOzs7V0FHRztRQUNILE1BQU0sUUFBUSxHQUFHLHNDQUFnQixDQUFDLCtCQUErQixDQUFBO1FBQ2pFLG1EQUE2QixDQUFxQixJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUE7UUFDakUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDekQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBQ0QsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFBO0lBQ25DLENBQUM7Q0FDRjtBQTVCRCxnREE0QkM7QUFDRCxpQ0FBVyxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFFL0IsTUFBYSx1QkFBdUI7SUFxQmxDLFlBQVksT0FBZ0M7UUFUNUMsaUJBQVksR0FBbUIsRUFBRSxDQUFBO1FBUWpDLHNCQUFpQixHQUFzQixNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBRXRELDBGQUEwRjtRQUMxRiwyQkFBSyxDQUFDLHVEQUE2QixDQUFDLE9BQU8sQ0FBQyxFQUFFLHdCQUF3QixDQUFDLENBQUE7UUFDdkUsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLDZDQUF1QixDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ2pELElBQUksQ0FBQyxXQUFXLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztZQUMvQixTQUFTO1lBQ1QsU0FBUztTQUNhLENBQUMsQ0FBQTtRQUN6Qjs7O1dBR0c7UUFDSCxNQUFNLE9BQU8sR0FBRyxzQ0FBZ0IsQ0FBQywrQkFBK0IsQ0FBQTtRQUNoRSxtREFBNkIsQ0FBMEIsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFBO1FBQ3JFLCtDQUF5QixDQUEwQixJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUE7UUFDakUsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUE7UUFDOUQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQTtJQUNyQixDQUFDO0lBQ0QsV0FBVztRQUNULE9BQU8sSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUE7SUFDeEQsQ0FBQztDQUNGO0FBMUNELDBEQTBDQztBQUNELGlDQUFXLENBQUMsdUJBQXVCLENBQUMsQ0FBQSJ9