"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
// @ts-ignore
const readable_stream_1 = require("readable-stream");
const material_management_node_1 = require("@aws-crypto/material-management-node");
const serialize_1 = require("@aws-crypto/serialize");
const toUtf8 = (input) => Buffer.from(input.buffer, input.byteOffset, input.byteLength).toString('utf8');
const deserialize = serialize_1.deserializeFactory(toUtf8, material_management_node_1.NodeAlgorithmSuite);
const PortableTransformWithType = readable_stream_1.Transform;
class ParseHeaderStream extends PortableTransformWithType {
    constructor(cmm) {
        super();
        Object.defineProperty(this, 'materialsManager', {
            value: cmm,
            enumerable: true,
        });
        this._headerState = {
            buffer: Buffer.alloc(0),
            headerParsed: false,
        };
    }
    _transform(chunk, encoding, callback) {
        const { buffer } = this._headerState;
        const headerBuffer = Buffer.concat([buffer, chunk]);
        const headerInfo = deserialize.deserializeMessageHeader(headerBuffer);
        if (!headerInfo) {
            this._headerState.buffer = headerBuffer;
            return callback();
        }
        const { messageHeader, algorithmSuite } = headerInfo;
        const { rawHeader, headerIv, headerAuthTag } = headerInfo;
        const suite = new material_management_node_1.NodeAlgorithmSuite(algorithmSuite.id);
        const { encryptionContext, encryptedDataKeys } = messageHeader;
        this.materialsManager
            .decryptMaterials({ suite, encryptionContext, encryptedDataKeys })
            .then((material) => {
            this._headerState.buffer = Buffer.alloc(0); // clear the Buffer...
            const { kdfGetDecipher, getVerify, dispose } = material_management_node_1.getDecryptionHelper(material);
            const info = serialize_1.kdfInfo(messageHeader.suiteId, messageHeader.messageId);
            const getDecipher = kdfGetDecipher(info);
            const headerAuth = getDecipher(headerIv);
            headerAuth.setAAD(Buffer.from(rawHeader.buffer, rawHeader.byteOffset, rawHeader.byteLength));
            headerAuth.setAuthTag(Buffer.from(headerAuthTag.buffer, headerAuthTag.byteOffset, headerAuthTag.byteLength));
            headerAuth.update(Buffer.alloc(0));
            headerAuth.final(); // will throw if invalid
            const verify = getVerify ? getVerify() : void 0;
            const verifyInfo = {
                headerInfo,
                getDecipher,
                verify,
                dispose,
            };
            this.emit('VerifyInfo', verifyInfo);
            this.emit('MessageHeader', headerInfo.messageHeader);
            this._headerState.headerParsed = true;
            // The header is parsed, pass control
            const readPos = rawHeader.byteLength + headerIv.byteLength + headerAuthTag.byteLength;
            const tail = headerBuffer.slice(readPos);
            /* needs calls in downstream _transform streams will throw.
             * But streams are async.
             * So this error should be turned into an `.emit('error', ex)`.
             */
            this._transform = (chunk, _enc, cb) => {
                try {
                    cb(null, chunk);
                }
                catch (ex) {
                    this.emit('error', ex);
                }
            };
            // flush the tail.  Stream control is now in the verify and decrypt streams
            return setImmediate(() => this._transform(tail, encoding, callback));
        })
            .catch((err) => callback(err));
    }
    _flush(callback) {
        /* Postcondition: A completed header MUST have been processed.
         * callback is an errBack function,
         * so it expects either an error OR undefined
         */
        callback(this._headerState.headerParsed
            ? undefined
            : new Error('Incomplete Header'));
    }
}
exports.ParseHeaderStream = ParseHeaderStream;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFyc2VfaGVhZGVyX3N0cmVhbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wYXJzZV9oZWFkZXJfc3RyZWFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxvRUFBb0U7QUFDcEUsc0NBQXNDOztBQUV0QyxhQUFhO0FBQ2IscURBQWdFO0FBRWhFLG1GQUk2QztBQUM3QyxxREFBbUU7QUFHbkUsTUFBTSxNQUFNLEdBQUcsQ0FBQyxLQUFpQixFQUFFLEVBQUUsQ0FDbkMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUNoRixNQUFNLFdBQVcsR0FBRyw4QkFBa0IsQ0FBQyxNQUFNLEVBQUUsNkNBQWtCLENBQUMsQ0FBQTtBQUNsRSxNQUFNLHlCQUF5QixHQUFHLDJCQUVwQixDQUFBO0FBT2QsTUFBYSxpQkFBa0IsU0FBUSx5QkFBeUI7SUFHOUQsWUFBWSxHQUF5QjtRQUNuQyxLQUFLLEVBQUUsQ0FBQTtRQUNQLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLGtCQUFrQixFQUFFO1lBQzlDLEtBQUssRUFBRSxHQUFHO1lBQ1YsVUFBVSxFQUFFLElBQUk7U0FDakIsQ0FBQyxDQUFBO1FBQ0YsSUFBSSxDQUFDLFlBQVksR0FBRztZQUNsQixNQUFNLEVBQUUsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDdkIsWUFBWSxFQUFFLEtBQUs7U0FDcEIsQ0FBQTtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsS0FBVSxFQUFFLFFBQWdCLEVBQUUsUUFBa0I7UUFDekQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUE7UUFDcEMsTUFBTSxZQUFZLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENB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