// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
import { NodeDefaultCryptographicMaterialsManager, KeyringNode, } from '@aws-crypto/material-management-node';
import { ParseHeaderStream } from './parse_header_stream';
import { VerifyStream } from './verify_stream';
import { getDecipherStream } from './decipher_stream';
import Duplexify from 'duplexify';
// @ts-ignore
import { pipeline, PassThrough } from 'readable-stream';
export function decryptStream(cmm, { maxBodySize } = {}) {
    /* If the cmm is a Keyring, wrap it with NodeDefaultCryptographicMaterialsManager. */
    cmm =
        cmm instanceof KeyringNode
            ? new NodeDefaultCryptographicMaterialsManager(cmm)
            : cmm;
    const parseHeaderStream = new ParseHeaderStream(cmm);
    const verifyStream = new VerifyStream({ maxBodySize });
    const decipherStream = getDecipherStream();
    const stream = new Duplexify(parseHeaderStream, decipherStream);
    /* pipeline will _either_ stream.destroy or the callback.
     * decipherStream uses destroy to dispose the material.
     * So I tack a pass though stream onto the end.
     */
    pipeline(parseHeaderStream, verifyStream, decipherStream, new PassThrough(), (err) => {
        if (err)
            stream.emit('error', err);
    });
    // Forward header events
    parseHeaderStream.once('MessageHeader', (header) => stream.emit('MessageHeader', header));
    return stream;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjcnlwdF9zdHJlYW0uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVjcnlwdF9zdHJlYW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQztBQUV0QyxPQUFPLEVBQ0wsd0NBQXdDLEVBQ3hDLFdBQVcsR0FFWixNQUFNLHNDQUFzQyxDQUFBO0FBQzdDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBQ3pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQTtBQUM5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQTtBQUNyRCxPQUFPLFNBQVMsTUFBTSxXQUFXLENBQUE7QUFHakMsYUFBYTtBQUNiLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUE7QUFNdkQsTUFBTSxVQUFVLGFBQWEsQ0FDM0IsR0FBdUMsRUFDdkMsRUFBRSxXQUFXLEtBQTJCLEVBQUU7SUFFMUMscUZBQXFGO0lBQ3JGLEdBQUc7UUFDRCxHQUFHLFlBQVksV0FBVztZQUN4QixDQUFDLENBQUMsSUFBSSx3Q0FBd0MsQ0FBQyxHQUFHLENBQUM7WUFDbkQsQ0FBQyxDQUFDLEdBQUcsQ0FBQTtJQUVULE1BQU0saUJBQWlCLEdBQUcsSUFBSSxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsQ0FBQTtJQUNwRCxNQUFNLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUE7SUFDdEQsTUFBTSxjQUFjLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQTtJQUMxQyxNQUFNLE1BQU0sR0FBRyxJQUFJLFNBQVMsQ0FBQyxpQkFBaUIsRUFBRSxjQUFjLENBQUMsQ0FBQTtJQUUvRDs7O09BR0c7SUFDSCxRQUFRLENBQ04saUJBQWlCLEVBQ2pCLFlBQVksRUFDWixjQUFjLEVBQ2QsSUFBSSxXQUFXLEVBQUUsRUFDakIsQ0FBQyxHQUFVLEVBQUUsRUFBRTtRQUNiLElBQUksR0FBRztZQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFBO0lBQ3BDLENBQUMsQ0FDRixDQUFBO0lBRUQsd0JBQXdCO0lBQ3hCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUNqRCxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FDckMsQ0FBQTtJQUVELE9BQU8sTUFBTSxDQUFBO0FBQ2YsQ0FBQyJ9