"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_1 = require("@aws-crypto/material-management");
const serialize_1 = require("@aws-crypto/serialize");
const crypto_1 = require("crypto");
/**
 * The DefaultCryptographicMaterialsManager is a specific implementation of the CryptographicMaterialsManager.
 * New cryptography materials managers SHOULD extend from NodeMaterialsManager.
 * Users should never need to create an instance of a DefaultCryptographicMaterialsManager.
 */
class NodeDefaultCryptographicMaterialsManager {
    constructor(keyring) {
        /* Precondition: keyrings must be a KeyringNode. */
        material_management_1.needs(keyring instanceof material_management_1.KeyringNode, 'Unsupported type.');
        material_management_1.readOnlyProperty(this, 'keyring', keyring);
    }
    async getEncryptionMaterials({ suite, encryptionContext, }) {
        suite =
            suite ||
                new material_management_1.NodeAlgorithmSuite(material_management_1.AlgorithmSuiteIdentifier.ALG_AES256_GCM_IV12_TAG16_HKDF_SHA384_ECDSA_P384);
        /* Precondition: NodeDefaultCryptographicMaterialsManager must reserve the ENCODED_SIGNER_KEY constant from @aws-crypto/serialize.
         * A CryptographicMaterialsManager can change entries to the encryptionContext
         * but changing these values has consequences.
         * The DefaultCryptographicMaterialsManager uses the value in the encryption context to store public signing key.
         * If the caller is using this value in their encryption context the Default CMM is probably not the CMM they want to use.
         */
        material_management_1.needs(!Object.prototype.hasOwnProperty.call(encryptionContext, serialize_1.ENCODED_SIGNER_KEY), `Reserved encryptionContext value ${serialize_1.ENCODED_SIGNER_KEY} not allowed.`);
        const material = await this.keyring.onEncrypt(this._initializeEncryptionMaterial(suite, encryptionContext));
        /* Postcondition: The NodeEncryptionMaterial must contain a valid dataKey.
         * This verifies that the data key matches the algorithm suite specification
         * and that the unencrypted data key is non-NULL.
         * See: cryptographic_materials.ts, `getUnencryptedDataKey`
         */
        material_management_1.needs(material.getUnencryptedDataKey(), 'Unencrypted data key is invalid.');
        /* Postcondition: The NodeEncryptionMaterial must contain at least 1 EncryptedDataKey. */
        material_management_1.needs(material.encryptedDataKeys.length, 'No EncryptedDataKeys: the ciphertext can never be decrypted.');
        return material;
    }
    async decryptMaterials({ suite, encryptedDataKeys, encryptionContext, }) {
        const material = await this.keyring.onDecrypt(this._initializeDecryptionMaterial(suite, encryptionContext), encryptedDataKeys.slice());
        /* Postcondition: The NodeDecryptionMaterial must contain a valid dataKey.
         * See: cryptographic_materials.ts, `getUnencryptedDataKey` also verifies
         * that the unencrypted data key has not been manipulated,
         * that the data key matches the algorithm suite specification
         * and that the unencrypted data key is non-NULL.
         */
        material_management_1.needs(material.getUnencryptedDataKey(), 'Unencrypted data key is invalid.');
        return material;
    }
    _initializeEncryptionMaterial(suite, encryptionContext) {
        const { signatureCurve: namedCurve } = suite;
        /* Check for early return (Postcondition): The algorithm suite specification must support a signatureCurve to generate a ECDH key. */
        if (!namedCurve)
            return new material_management_1.NodeEncryptionMaterial(suite, encryptionContext);
        const ecdh = crypto_1.createECDH(namedCurve);
        ecdh.generateKeys();
        // @ts-ignore I want a compressed buffer.
        const compressPoint = ecdh.getPublicKey(undefined, 'compressed');
        const privateKey = ecdh.getPrivateKey();
        const signatureKey = new material_management_1.SignatureKey(privateKey, new Uint8Array(compressPoint), suite);
        return new material_management_1.NodeEncryptionMaterial(suite, {
            ...encryptionContext,
            [serialize_1.ENCODED_SIGNER_KEY]: compressPoint.toString('base64'),
        }).setSignatureKey(signatureKey);
    }
    _initializeDecryptionMaterial(suite, encryptionContext) {
        const { signatureCurve: namedCurve } = suite;
        /* Check for early return (Postcondition): The algorithm suite specification must support a signatureCurve to load a signature key. */
        if (!namedCurve)
            return new material_management_1.NodeDecryptionMaterial(suite, encryptionContext);
        /* Precondition: NodeDefaultCryptographicMaterialsManager If the algorithm suite specification requires a signatureCurve a context must exist. */
        if (!encryptionContext)
            throw new Error('Encryption context does not contain required public key.');
        const { [serialize_1.ENCODED_SIGNER_KEY]: compressPoint } = encryptionContext;
        /* Precondition: NodeDefaultCryptographicMaterialsManager The context must contain the public key. */
        material_management_1.needs(compressPoint, 'Context does not contain required public key.');
        const publicKeyBytes = material_management_1.VerificationKey.decodeCompressPoint(Buffer.from(compressPoint, 'base64'), suite);
        return new material_management_1.NodeDecryptionMaterial(suite, encryptionContext).setVerificationKey(new material_management_1.VerificationKey(publicKeyBytes, suite));
    }
}
exports.NodeDefaultCryptographicMaterialsManager = NodeDefaultCryptographicMaterialsManager;
material_management_1.immutableClass(NodeDefaultCryptographicMaterialsManager);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9jcnlwdG9ncmFwaGljX21hdGVyaWFsc19tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL25vZGVfY3J5cHRvZ3JhcGhpY19tYXRlcmlhbHNfbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsb0VBQW9FO0FBQ3BFLHNDQUFzQzs7QUFFdEMseUVBaUJ3QztBQUV4QyxxREFBMEQ7QUFFMUQsbUNBQW1DO0FBU25DOzs7O0dBSUc7QUFDSCxNQUFhLHdDQUF3QztJQUduRCxZQUFZLE9BQW9CO1FBQzlCLG1EQUFtRDtRQUNuRCwyQkFBSyxDQUFDLE9BQU8sWUFBWSxpQ0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUE7UUFDMUQsc0NBQWdCLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUM1QyxDQUFDO0lBRUQsS0FBSyxDQUFDLHNCQUFzQixDQUFDLEVBQzNCLEtBQUssRUFDTCxpQkFBaUIsR0FDSztRQUN0QixLQUFLO1lBQ0gsS0FBSztnQkFDTCxJQUFJLHdDQUFrQixDQUNwQiw4Q0FBd0IsQ0FBQyxnREFBZ0QsQ0FDMUUsQ0FBQTtRQUVIOzs7OztXQUtHO1FBQ0gsMkJBQUssQ0FDSCxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FDbkMsaUJBQWlCLEVBQ2pCLDhCQUFrQixDQUNuQixFQUNELG9DQUFvQyw4QkFBa0IsZUFBZSxDQUN0RSxDQUFBO1FBRUQsTUFBTSxRQUFRLEdBQUcsTUFBTSxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FDM0MsSUFBSSxDQUFDLDZCQUE2QixDQUFDLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxDQUM3RCxDQUFBO1FBRUQ7Ozs7V0FJRztRQUNILDJCQUFLLENBQUMsUUFBUSxDQUFDLHFCQUFxQixFQUFFLEVBQUUsa0NBQWtDLENBQUMsQ0FBQTtRQUUzRSx5RkFBeUY7UUFDekYsMkJBQUssQ0FDSCxRQUFRLENB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