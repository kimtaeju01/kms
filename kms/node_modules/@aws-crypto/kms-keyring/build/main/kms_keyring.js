"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
const material_management_1 = require("@aws-crypto/material-management");
const helpers_1 = require("./helpers");
const region_from_kms_key_arn_1 = require("./region_from_kms_key_arn");
function KmsKeyringClass(BaseKeyring) {
    class KmsKeyring extends BaseKeyring {
        constructor({ clientProvider, generatorKeyId, keyIds = [], grantTokens, discovery, }) {
            super();
            /* Precondition: This is an abstract class. (But TypeScript does not have a clean way to model this) */
            material_management_1.needs(this.constructor !== KmsKeyring, 'new KmsKeyring is not allowed');
            /* Precondition: A noop KmsKeyring is not allowed. */
            material_management_1.needs(!(!discovery && !generatorKeyId && !keyIds.length), 'Noop keyring is not allowed: Set a keyId or discovery');
            /* Precondition: A keyring can be either a Discovery or have keyIds configured. */
            material_management_1.needs(!(discovery && (generatorKeyId || keyIds.length)), 'A keyring can be either a Discovery or have keyIds configured.');
            /* Precondition: All KMS key identifiers must be valid. */
            material_management_1.needs(!generatorKeyId ||
                typeof region_from_kms_key_arn_1.regionFromKmsKeyArn(generatorKeyId) === 'string', 'Malformed arn.');
            material_management_1.needs(keyIds.every((keyArn) => typeof region_from_kms_key_arn_1.regionFromKmsKeyArn(keyArn) === 'string'), 'Malformed arn.');
            /* Precondition: clientProvider needs to be a callable function. */
            material_management_1.needs(typeof clientProvider === 'function', 'Missing clientProvider');
            material_management_1.readOnlyProperty(this, 'clientProvider', clientProvider);
            material_management_1.readOnlyProperty(this, 'keyIds', Object.freeze(keyIds.slice()));
            material_management_1.readOnlyProperty(this, 'generatorKeyId', generatorKeyId);
            material_management_1.readOnlyProperty(this, 'grantTokens', grantTokens);
            material_management_1.readOnlyProperty(this, 'isDiscovery', !!discovery);
        }
        /* Keyrings *must* preserve the order of EDK's.  The generatorKeyId is the first on this list. */
        async _onEncrypt(material) {
            /* Check for early return (Postcondition): Discovery Keyrings do not encrypt. */
            if (this.isDiscovery)
                return material;
            const keyIds = this.keyIds.slice();
            const { clientProvider, generatorKeyId, grantTokens } = this;
            if (generatorKeyId && !material.hasUnencryptedDataKey) {
                const dataKey = await helpers_1.generateDataKey(clientProvider, material.suite.keyLengthBytes, generatorKeyId, material.encryptionContext, grantTokens);
                /* Precondition: A generatorKeyId must generate if we do not have an unencrypted data key.
                 * Client supplier is allowed to return undefined if, for example, user wants to exclude particular
                 * regions. But if we are here it means that user configured keyring with a KMS key that was
                 * incompatible with the client supplier in use.
                 */
                if (!dataKey)
                    throw new Error('Generator KMS key did not generate a data key');
                const flags = material_management_1.KeyringTraceFlag.WRAPPING_KEY_GENERATED_DATA_KEY |
                    material_management_1.KeyringTraceFlag.WRAPPING_KEY_SIGNED_ENC_CTX |
                    material_management_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY;
                const trace = {
                    keyNamespace: helpers_1.KMS_PROVIDER_ID,
                    keyName: dataKey.KeyId,
                    flags,
                };
                material
                    /* Postcondition: The generated unencryptedDataKey length must match the algorithm specification.
                     * See cryptographic_materials as setUnencryptedDataKey will throw in this case.
                     */
                    .setUnencryptedDataKey(dataKey.Plaintext, trace)
                    .addEncryptedDataKey(helpers_1.kmsResponseToEncryptedDataKey(dataKey), material_management_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY |
                    material_management_1.KeyringTraceFlag.WRAPPING_KEY_SIGNED_ENC_CTX);
            }
            else if (generatorKeyId) {
                keyIds.unshift(generatorKeyId);
            }
            /* Precondition: If a generator does not exist, an unencryptedDataKey *must* already exist.
             * Furthermore *only* CMK's explicitly designated as generators can generate data keys.
             * See cryptographic_materials as getUnencryptedDataKey will throw in this case.
             */
            const unencryptedDataKey = material_management_1.unwrapDataKey(material.getUnencryptedDataKey());
            const flags = material_management_1.KeyringTraceFlag.WRAPPING_KEY_ENCRYPTED_DATA_KEY |
                material_management_1.KeyringTraceFlag.WRAPPING_KEY_SIGNED_ENC_CTX;
            for (const kmsKey of keyIds) {
                const kmsEDK = await helpers_1.encrypt(clientProvider, unencryptedDataKey, kmsKey, material.encryptionContext, grantTokens);
                /* clientProvider may not return a client, in this case there is not an EDK to add */
                if (kmsEDK)
                    material.addEncryptedDataKey(helpers_1.kmsResponseToEncryptedDataKey(kmsEDK), flags);
            }
            return material;
        }
        async _onDecrypt(material, encryptedDataKeys) {
            const keyIds = this.keyIds.slice();
            const { clientProvider, generatorKeyId, grantTokens } = this;
            if (generatorKeyId)
                keyIds.unshift(generatorKeyId);
            /* If there are no key IDs in the list, keyring is in "discovery" mode and will attempt KMS calls with
             * every ARN it comes across in the message. If there are key IDs in the list, it will cross check the
             * ARN it reads with that list before attempting KMS calls. Note that if caller provided key IDs in
             * anything other than a CMK ARN format, the Encryption SDK will not attempt to decrypt those data keys, because
             * the EDK data format always specifies the CMK with the full (non-alias) ARN.
             */
            const decryptableEDKs = encryptedDataKeys.filter(({ providerId, providerInfo }) => {
                if (providerId !== helpers_1.KMS_PROVIDER_ID)
                    return false;
                /* Discovery keyrings can not have keyIds configured,
                 * and non-discovery keyrings must have keyIds configured.
                 */
                return this.isDiscovery || keyIds.includes(providerInfo);
            });
            const cmkErrors = [];
            for (const edk of decryptableEDKs) {
                let dataKey = false;
                try {
                    dataKey = await helpers_1.decrypt(clientProvider, edk, material.encryptionContext, grantTokens);
                }
                catch (e) {
                    /* Failures onDecrypt should not short-circuit the process
                     * If the caller does not have access they may have access
                     * through another Keyring.
                     */
                    cmkErrors.push(e);
                }
                /* Check for early return (Postcondition): clientProvider may not return a client. */
                if (!dataKey)
                    continue;
                /* Postcondition: The KeyId from KMS must match the encoded KeyID. */
                material_management_1.needs(dataKey.KeyId === edk.providerInfo, 'KMS Decryption key does not match serialized provider.');
                const flags = material_management_1.KeyringTraceFlag.WRAPPING_KEY_DECRYPTED_DATA_KEY |
                    material_management_1.KeyringTraceFlag.WRAPPING_KEY_VERIFIED_ENC_CTX;
                const trace = {
                    keyNamespace: helpers_1.KMS_PROVIDER_ID,
                    keyName: dataKey.KeyId,
                    flags,
                };
                /* Postcondition: The decrypted unencryptedDataKey length must match the algorithm specification.
                 * See cryptographic_materials as setUnencryptedDataKey will throw in this case.
                 */
                material.setUnencryptedDataKey(dataKey.Plaintext, trace);
                return material;
            }
            /* Postcondition: A CMK must provide a valid data key or KMS must not have raised any errors.
             * If I have a data key,
             * decrypt errors can be ignored.
             * However, if I was unable to decrypt a data key AND I have errors,
             * these errors should bubble up.
             * Otherwise, the only error customers will see is that
             * the material does not have an unencrypted data key.
             * So I return a concatenated Error message
             */
            material_management_1.needs(material.hasValidKey() ||
                (!material.hasValidKey() && !cmkErrors.length), cmkErrors.reduce((m, e, i) => `${m} Error #${i + 1} \n ${e.stack} \n`, 'Unable to decrypt data key and one or more KMS CMKs had an error. \n '));
            return material;
        }
    }
    material_management_1.immutableClass(KmsKeyring);
    return KmsKeyring;
}
exports.KmsKeyringClass = KmsKeyringClass;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia21zX2tleXJpbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMva21zX2tleXJpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7O0FBSXRDLHlFQVl3QztBQUN4Qyx1Q0FNa0I7QUFDbEIsdUVBQStEO0FBcUMvRCxTQUFnQixlQUFlLENBRzdCLFdBQW9DO0lBQ3BDLE1BQU0sVUFBVyxTQUFRLFdBQVc7UUFPbEMsWUFBWSxFQUNWLGNBQWMsRUFDZCxjQUFjLEVBQ2QsTUFBTSxHQUFHLEVBQUUsRUFDWCxXQUFXLEVBQ1gsU0FBUyxHQUNlO1lBQ3hCLEtBQUssRUFBRSxDQUFBO1lBQ1AsdUdBQXVHO1lBQ3ZHLDJCQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsS0FBSyxVQUFVLEVBQUUsK0JBQStCLENBQUMsQ0FBQTtZQUN2RSxxREFBcUQ7WUFDckQsMkJBQUssQ0FDSCxDQUFDLENBQUMsQ0FBQyxTQUFTLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQ2xELHVEQUF1RCxDQUN4RCxDQUFBO1lBQ0Qsa0ZBQWtGO1lBQ2xGLDJCQUFLLENBQ0gsQ0FBQyxDQUFDLFNBQVMsSUFBSSxDQUFDLGNBQWMsSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsRUFDakQsZ0VBQWdFLENBQ2pFLENBQUE7WUFDRCwwREFBMEQ7WUFDMUQsMkJBQUssQ0FDSCxDQUFDLGNBQWM7Z0JBQ2IsT0FBTyw2Q0FBbUIsQ0FBQyxjQUFjLENBQUMsS0FBSyxRQUFRLEVBQ3pELGdCQUFnQixDQUNqQixDQUFBO1lBQ0QsMkJBQUssQ0FDSCxNQUFNLENBQUMsS0FBSyxDQUNWLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxPQUFPLDZDQUFtQixDQUFDLE1BQU0sQ0FBQyxLQUFLLFFBQVEsQ0FDNUQsRUFDRCxnQkFBZ0IsQ0FDakIsQ0FBQTtZQUNELG1FQUFtRTtZQUNuRSwyQkFBSyxD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