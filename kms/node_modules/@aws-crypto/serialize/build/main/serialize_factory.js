"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * This public interface for serializing the AWS Encryption SDK Message Header Format
 * is provided for the use of the Encryption SDK for JavaScript only.  It can be used
 * as a reference but is not intended to be use by any packages other than the
 * Encryption SDK for JavaScript.
 *
 * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-structure
 */
const concat_buffers_1 = require("./concat_buffers");
const material_management_1 = require("@aws-crypto/material-management");
const identifiers_1 = require("./identifiers");
const uint_util_1 = require("./uint_util");
function serializeFactory(fromUtf8) {
    return {
        frameIv,
        nonFramedBodyIv,
        headerAuthIv,
        frameHeader,
        finalFrameHeader,
        encodeEncryptionContext,
        serializeEncryptionContext,
        serializeEncryptedDataKeys,
        serializeEncryptedDataKey,
        serializeMessageHeader,
    };
    function frameIv(ivLength, sequenceNumber) {
        /* Precondition: sequenceNumber must conform to the specification. i.e. 1 - (2^32 - 1)
         * The sequence number starts at 1
         * https://github.com/awslabs/aws-encryption-sdk-specification/blob/master/data-format/message-body.md#sequence-number
         */
        material_management_1.needs(sequenceNumber > 0 &&
            identifiers_1.SequenceIdentifier.SEQUENCE_NUMBER_END >= sequenceNumber, 'sequenceNumber out of bounds');
        const buff = new Uint8Array(ivLength);
        const view = new DataView(buff.buffer, buff.byteOffset, buff.byteLength);
        view.setUint32(ivLength - 4, sequenceNumber, false); // big-endian
        return buff;
    }
    function nonFramedBodyIv(ivLength) {
        return frameIv(ivLength, 1);
    }
    function headerAuthIv(ivLength) {
        return new Uint8Array(ivLength); // new Uint8Array is 0 filled by default
    }
    function frameHeader(sequenceNumber, iv) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt32BE(sequenceNumber), iv);
    }
    function finalFrameHeader(sequenceNumber, iv, contentLength) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt32BE(identifiers_1.SequenceIdentifier.SEQUENCE_NUMBER_END), // Final Frame identifier
        uint_util_1.uInt32BE(sequenceNumber), iv, uint_util_1.uInt32BE(contentLength));
    }
    function encodeEncryptionContext(encryptionContext) {
        return (Object.entries(encryptionContext)
            /* Precondition: The serialized encryption context entries must be sorted by UTF-8 key value. */
            .sort(([aKey], [bKey]) => aKey.localeCompare(bKey))
            .map((entries) => entries.map(fromUtf8))
            .map(([key, value]) => concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(key.byteLength), key, uint_util_1.uInt16BE(value.byteLength), value)));
    }
    function serializeEncryptionContext(encryptionContext) {
        const encryptionContextElements = encodeEncryptionContext(encryptionContext);
        /* Check for early return (Postcondition): If there is no context then the length of the _whole_ serialized portion is 0.
         * This is part of the specification of the AWS Encryption SDK Message Format.
         * It is not 0 for length and 0 for count.  The count element is omitted.
         */
        if (!encryptionContextElements.length)
            return uint_util_1.uInt16BE(0);
        const aadData = concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(encryptionContextElements.length), ...encryptionContextElements);
        const aadLength = uint_util_1.uInt16BE(aadData.byteLength);
        return concat_buffers_1.concatBuffers(aadLength, aadData);
    }
    function serializeEncryptedDataKeys(encryptedDataKeys) {
        const encryptedKeyInfo = encryptedDataKeys.map(serializeEncryptedDataKey);
        return concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(encryptedDataKeys.length), ...encryptedKeyInfo);
    }
    function serializeEncryptedDataKey(edk) {
        const { providerId, providerInfo, encryptedDataKey, rawInfo } = edk;
        const providerIdBytes = fromUtf8(providerId);
        // The providerInfo is technically a binary field, so I prefer rawInfo
        const providerInfoBytes = rawInfo || fromUtf8(providerInfo);
        return concat_buffers_1.concatBuffers(uint_util_1.uInt16BE(providerIdBytes.byteLength), providerIdBytes, uint_util_1.uInt16BE(providerInfoBytes.byteLength), providerInfoBytes, uint_util_1.uInt16BE(encryptedDataKey.byteLength), encryptedDataKey);
    }
    function serializeMessageHeader(messageHeader) {
        return concat_buffers_1.concatBuffers(uint_util_1.uInt8(messageHeader.version), uint_util_1.uInt8(messageHeader.type), uint_util_1.uInt16BE(messageHeader.suiteId), messageHeader.messageId, serializeEncryptionContext(messageHeader.encryptionContext), serializeEncryptedDataKeys(messageHeader.encryptedDataKeys), new Uint8Array([messageHeader.contentType]), new Uint8Array([0, 0, 0, 0]), uint_util_1.uInt8(messageHeader.headerIvLength), uint_util_1.uInt32BE(messageHeader.frameLength));
    }
}
exports.serializeFactory = serializeFactory;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXplX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2VyaWFsaXplX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7O0FBRXRDOzs7Ozs7O0dBT0c7QUFFSCxxREFBZ0Q7QUFDaEQseUVBS3dDO0FBQ3hDLCtDQUFrRDtBQUNsRCwyQ0FBdUQ7QUFHdkQsU0FBZ0IsZ0JBQWdCLENBQUMsUUFBb0M7SUFDbkUsT0FBTztRQUNMLE9BQU87UUFDUCxlQUFlO1FBQ2YsWUFBWTtRQUNaLFdBQVc7UUFDWCxnQkFBZ0I7UUFDaEIsdUJBQXVCO1FBQ3ZCLDBCQUEwQjtRQUMxQiwwQkFBMEI7UUFDMUIseUJBQXlCO1FBQ3pCLHNCQUFzQjtLQUN2QixDQUFBO0lBRUQsU0FBUyxPQUFPLENBQUMsUUFBa0IsRUFBRSxjQUFzQjtRQUN6RDs7O1dBR0c7UUFDSCwyQkFBSyxDQUNILGNBQWMsR0FBRyxDQUFDO1lBQ2hCLGdDQUFrQixDQUFDLG1CQUFtQixJQUFJLGNBQWMsRUFDMUQsOEJBQThCLENBQy9CLENBQUE7UUFFRCxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsQ0FBQTtRQUNyQyxNQUFNLElBQUksR0FBRyxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQ3hFLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxHQUFHLENBQUMsRUFBRSxjQUFjLEVBQUUsS0FBSyxDQUFDLENBQUEsQ0FBQyxhQUFhO1FBQ2pFLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQztJQUVELFNBQVMsZUFBZSxDQUFDLFFBQWtCO1FBQ3pDLE9BQU8sT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQTtJQUM3QixDQUFDO0lBRUQsU0FBUyxZQUFZLENBQUMsUUFB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