"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", { value: true });
/*
 * This public interface for constants is provided for
 * the use of the Encryption SDK for JavaScript only.  It can be used
 * as a reference but is not intended to be use by any packages other
 * than the Encryption SDK for JavaScript.
 *
 * See: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/reference.html
 *
 * https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-aad (algorithms with signing)
 * https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-version
 * https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-content-type
 * https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/body-aad-reference.html (Body AAD Content)
 * https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/message-format.html#header-type
 * https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/body-aad-reference.html#body-aad-sequence-number
 */
exports.ENCODED_SIGNER_KEY = 'aws-crypto-public-key';
var SerializationVersion;
(function (SerializationVersion) {
    SerializationVersion[SerializationVersion["V1"] = 1] = "V1";
})(SerializationVersion = exports.SerializationVersion || (exports.SerializationVersion = {}));
Object.freeze(SerializationVersion);
var ContentType;
(function (ContentType) {
    ContentType[ContentType["NO_FRAMING"] = 1] = "NO_FRAMING";
    ContentType[ContentType["FRAMED_DATA"] = 2] = "FRAMED_DATA";
})(ContentType = exports.ContentType || (exports.ContentType = {}));
Object.freeze(ContentType);
var ContentAADString;
(function (ContentAADString) {
    ContentAADString["FRAME_STRING_ID"] = "AWSKMSEncryptionClient Frame";
    ContentAADString["FINAL_FRAME_STRING_ID"] = "AWSKMSEncryptionClient Final Frame";
    ContentAADString["NON_FRAMED_STRING_ID"] = "AWSKMSEncryptionClient Single Block";
})(ContentAADString = exports.ContentAADString || (exports.ContentAADString = {}));
Object.freeze(ContentAADString);
var ObjectType;
(function (ObjectType) {
    ObjectType[ObjectType["CUSTOMER_AE_DATA"] = 128] = "CUSTOMER_AE_DATA";
})(ObjectType = exports.ObjectType || (exports.ObjectType = {}));
Object.freeze(ObjectType);
var SequenceIdentifier;
(function (SequenceIdentifier) {
    SequenceIdentifier[SequenceIdentifier["SEQUENCE_NUMBER_END"] = 4294967295] = "SEQUENCE_NUMBER_END";
})(SequenceIdentifier = exports.SequenceIdentifier || (exports.SequenceIdentifier = {}));
Object.freeze(SequenceIdentifier);
var Maximum;
(function (Maximum) {
    // Maximum number of messages which are allowed to be encrypted under a single cached data key
    Maximum[Maximum["MESSAGES_PER_CACHED_KEY_LIMIT"] = 4294967296] = "MESSAGES_PER_CACHED_KEY_LIMIT";
    /* Maximum number of bytes that are allowed to be encrypted
     * under a single cached data key across messages.
     * The maximum value defined in the AWS Encryption SDK specification is 2 ** 63 - 1.
     * However Javascript can only perform safe operations on values
     * up to Number.MAX_SAFE_INTEGER === 9007199254740991 === 2 ** 53 - 1.
     * e.g
     * Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2 => true
     * Number.MAX_SAFE_INTEGER + 1 > Number.MAX_SAFE_INTEGER + 2 => false
     * Number.MAX_SAFE_INTEGER + 1 < Number.MAX_SAFE_INTEGER + 2 => false
     *
     * This means that after 2 ** 53 - 1 the process of accumulating a byte count
     * will never yield an accurate comparison and so, never halt.
     *
     * The choice here to use 2 ** 53 - 1 instead of Number.MAX_SAFE_INTEGER is deliberate.
     * This is because in the future Number.MAX_SAFE_INTEGER could be raised to 2 ** 66
     * or some value larger 2 ** 63.
     */
    Maximum[Maximum["BYTES_PER_CACHED_KEY_LIMIT"] = 9007199254740991] = "BYTES_PER_CACHED_KEY_LIMIT";
    /* This value should be Maximum.FRAME_COUNT * Maximum.FRAME_SIZE.
     * However this would be ~ 2 ** 64, much larger than Number.MAX_SAFE_INTEGER.
     * For the same reasons outlined above in BYTES_PER_CACHED_KEY_LIMIT
     * this value is set to 2 ** 53 - 1.
     */
    Maximum[Maximum["BYTES_PER_MESSAGE"] = 9007199254740991] = "BYTES_PER_MESSAGE";
    /* Maximum number of bytes for a single AES-GCM "operation."
     * This is related to the GHASH block size,
     * and can be thought of as the maximum bytes
     * that can be encrypted with a single key/IV pair.
     * The AWS Encryption SDK for Javascript
     * does not support non-framed encrypt
     * https://github.com/awslabs/aws-encryption-sdk-specification/blob/master/data-format/message-body.md#non-framed-data
     * So this value is only needed to ensure
     * that messages submitted for decrypt
     * are well formed.
     */
    Maximum[Maximum["BYTES_PER_AES_GCM_NONCE"] = 68719476704] = "BYTES_PER_AES_GCM_NONCE";
    // Maximum number of frames allowed in one message as defined in specification
    Maximum[Maximum["FRAME_COUNT"] = 4294967295] = "FRAME_COUNT";
    // Maximum bytes allowed in a single frame as defined in specification
    Maximum[Maximum["FRAME_SIZE"] = 4294967295] = "FRAME_SIZE";
    // Maximum bytes allowed in a non-framed message ciphertext as defined in specification
    Maximum[Maximum["GCM_CONTENT_SIZE"] = 4294967295] = "GCM_CONTENT_SIZE";
    Maximum[Maximum["NON_FRAMED_SIZE"] = 4294967295] = "NON_FRAMED_SIZE";
    // Maximum number of AAD bytes allowed as defined in specification
    Maximum[Maximum["AAD_BYTE_SIZE"] = 65535] = "AAD_BYTE_SIZE";
})(Maximum = exports.Maximum || (exports.Maximum = {}));
Object.freeze(Maximum);
// Default frame length when using framing
exports.FRAME_LENGTH = 4096;
// Message ID length as defined in specification
exports.MESSAGE_ID_LENGTH = 16;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpZmllcnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaWRlbnRpZmllcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLG9FQUFvRTtBQUNwRSxzQ0FBc0M7O0FBRXRDOzs7Ozs7Ozs7Ozs7OztHQWNHO0FBRVUsUUFBQSxrQkFBa0IsR0FBRyx1QkFBdUIsQ0FBQTtBQUV6RCxJQUFZLG9CQUVYO0FBRkQsV0FBWSxvQkFBb0I7SUFDOUIsMkRBQU0sQ0FBQTtBQUNSLENBQUMsRUFGVyxvQkFBb0IsR0FBcEIsNEJBQW9CLEtBQXBCLDRCQUFvQixRQUUvQjtBQUNELE1BQU0sQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQTtBQUVuQyxJQUFZLFdBR1g7QUFIRCxXQUFZLFdBQVc7SUFDckIseURBQWMsQ0FBQTtJQUNkLDJEQUFlLENBQUE7QUFDakIsQ0FBQyxFQUhXLFdBQVcsR0FBWCxtQkFBVyxLQUFYLG1CQUFXLFFBR3RCO0FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQTtBQUUxQixJQUFZLGdCQUlYO0FBSkQsV0FBWSxnQkFBZ0I7SUFDMUIsb0VBQWdELENBQUE7SUFDaEQsZ0ZBQTRELENBQUE7SUFDNUQsZ0ZBQTRELENBQUE7QUFDOUQsQ0FBQyxFQUpXLGdCQUFnQixHQUFoQix3QkFBZ0IsS0FBaEIsd0JBQWdCLFFBSTNCO0FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0FBRS9CLElBQVksVUFFWDtBQUZELFdBQVksVUFBVTtJQUNwQixxRUFBc0IsQ0FBQTtBQUN4QixDQUFDLEVBRlcsVUFBVSxHQUFWLGtCQUFVLEtBQVYsa0JBQVUsUUFFckI7QUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO0FBRXpCLElBQVksa0JBRVg7QUFGRCxXQUFZLGtCQUFrQjtJQUM1QixrR0FBZ0MsQ0FBQTtBQUNsQyxDQUFDLEVBRlcsa0JBQWtCLEdBQWxCLDBCQUFrQixLQUFsQiwwQkFBa0IsUUFFN0I7QUFDRCxNQUFNLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQUE7QUFFakMsSUFBWSxPQWdEWDtBQWhERCxXQUFZLE9BQU87SUFDakIsOEZBQThGO0lBQzlGLGdHQUF1QyxDQUFBO0lBQ3ZDOzs7Ozs7Ozs7Ozs7Ozs7O09BZ0JHO0lBQ0gsZ0dBQXdDLENBQUE7SUFDeEM7Ozs7T0FJRztJQUNILDhFQUErQixDQUFBO0lBQy9COzs7Ozs7Ozs7O09BVUc7SUFDSCxxRkFBc0MsQ0FBQTtJQUN0Qyw4RUFBOEU7SUFDOUUsNERBQXlCLENBQUE7SUFDekIsc0VBQXNFO0lBQ3RFLDBEQUF3QixDQUFBO0lBQ3hCLHVGQUF1RjtJQUN2RixzRUFBOEIsQ0FBQTtJQUM5QixvRUFBNkIsQ0FBQTtJQUM3QixrRUFBa0U7SUFDbEUsMkRBQTJCLENBQUE7QUFDN0IsQ0FBQyxFQWhEVyxPQUFPLEdBQVAsZUFBTyxLQUFQLGVBQU8sUUFnRGxCO0FBQ0QsTUFBTSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQTtBQUV0QiwwQ0FBMEM7QUFDN0IsUUFBQSxZQUFZLEdBQUcsSUFBSSxDQUFBO0FBQ2hDLGdEQUFnRDtBQUNuQyxRQUFBLGlCQUFpQixHQUFHLEVBQUUsQ0FBQSJ9